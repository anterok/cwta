%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: CWTCA_logo.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Toshiko Okumura
%%CreationDate: 10/29/10
%%BoundingBox: 0 0 454 370
%%HiResBoundingBox: 0 0 453.1934 369.2520
%%CropBox: 0 0 453.1934 369.2520
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 11994 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD1DFFCB534DA9FD7EFF53224D7EFD7DFF7E222353FD7DFF7E0123%4DFD7DFF7E222377FD7DFF5322227EFD7CFFA94D224DFD7DFFA84D2277FD%7DFFA82922FD7EFF772253FD7EFF4D29A9FD7EFF2277FD7EFF7E22FD7FFF%294DFD7EFF7E23A9FD7EFF2877FD7EFFA822FD26FFCFFD58FF4D53FD25FF%C9CEFD57FF7E29A9FD24FFCFC6FD58FF2877FD24FFC9C6C8FD57FFA822FD%24FFCFC6C6CFFD57FF4D53FD23FFC9C6C6C6CAFD56FF7E29A9FD22FFCFFD%04C6CFFD56FF2277FD22FFC8FD05C6C8CEC9CFC9CEC8FD4FFF7E22A97EFD%1FFFCEC6C6FEC6C6C6FEC6C6C6FEC6CEFD4FFFA822222329FD16FFCEC7C7%C7CDC8CFC9FD0DC6CFFD33FFCFFD1AFFA94D29A9FD19FFCFFD05C6CDCFCC%FD0BC6FD34FFC9C7CFFD19FF53FFA8A2A8FD15FF7EA9FFCDFD05C6CEFFCD%FD09C6C8FD35FFC6C6CFFD09FFCEFD10FF292253FD0FFFA97E7829232223%22FFFFFEC6FEC6C6C6FFFFCFC6FEC6C6C6FEC6C6C8FD35FFCDC6C6C8FD08%FFC6CFFD0FFF292222A8FD0AFF7E7E4D23222322222223224D53FFC8FD05%C6CAFFFFCFFD07C6CFFF4D4D7EA8FD30FFC9FD04C6CFCFFD05FFC6FECEFD%0EFF7E29A2A8FD07FF7E53292322232223285377A8A8FD05FFFD05C6CCFD%04FFFD06C6CEFF292322234DA9FD2FFFFD07C6C7C7CEC9C6C6C6C8FD0DFF%A8FD07FF7E53222201237E5353A2A8FD07FFC9CFFFC7FD06C6C9CFFFCFFD%05C6CEFF5301232222014D7EFD2DFFCFC6C6C6FEC6C6C7CFFFCFC6FEC6C6%C6CFFD0FFFA953A8FF7E22232278CBFD0CFFC6C6FEC6C6C6FEC8CEC7FEC6%C6C6CFC7C6C6FEC8FFFFFF534D2223222329FD2DFFCFFD04C6C7FFFFCFFD%08C6C9CFFD08FFCFCEFFFFFF4D22A2A8537EFFFFFF53537EFD09FFCFC7C6%C7C8CFFD04FFCAC7C6C6C8FFFD04C6FD05FF7E222322222278FD2DFFCECC%C6CFFFCEFD0BC6CCC8FD04CFCEC8C6C6CFFFFFA2234DFD07FF532322234D%FD11FFC9C6C6C6CFFFC6C6C6FD07FF53292223224DA8FD2EFFC9FD17C6C8%FFFFFF534DFD04FF7E537DFF2222012328FD10FFCEC6C6C6C8FFCDC6C6C9%FD07FFA853222201237EFD2DFFCFC9CDC7FEC6C6C6FEC6CDC7CDC8CEC8CE%CFCCC6FEC6C6C6FEFD04FF4DFD05FF7E23292322232223A8FD0FFFC8FEC6%C6C6CFC8C6C6CFFD09FF7E22232229A8FD36FFCFCFFD04FFCFCDC6C6C7CF%C9CEC6CFFD0AFF4D23222222232278FD0FFFC7C6C6C6CEC9C6C6C6C9FD0A%FFA8222322237EFD34FFC8FECFFFFFCFC8C6C6C6CEFD05FFCFFFFFA94D23%7EFD04FFA8222322232223222329CBFD0CFFC7C6C6FFFFFD04C6CFFD0BFF%A922232229A2FD30FFCACEC6C6C6C7FD06C6C8FD08FF7E2222227EFD04FF%7E2222232229537822224DFD0CFFC7C6CFCAC7FD04C6C9FD0CFFA8222322%29A8FD2FFFCEC6C6C6FEC6C6C6FEC6C6C7FD09FF22297EFD06FFA84DA922%A8FFFF7E4D7753FD0CFFC9C6FFCDC6C6C6FEC6FD0EFFA222232278FD31FF%C9C8FD05C6C7C9FD09FF53237EFD07FF7EA27E7EFD04FFA8FF53FD0CFFCE%C7CFFD05C6CCFD0FFF53222222A8FD42FFA928FD08FFA9FD16FFCFCEFD06%C6CFFD10FF4D222329FD30FF7E787EA8FD30FFC8FD04C6CDCFFD11FF7E23%22227EFD2EFF7E4D22297EFD16FFA97EFD18FFCEC6C6C6CDFD14FF4D2322%53FD2DFF53222229A2FD17FF4D4DA8FD17FFC8C6C6C6CFFD14FF7E222222%A9FD2BFF4D23224DA9FD17FF7E2322294D7EA8FD14FFCEC6C6C8FD16FF4D%222353FD2AFF29220153FD18FFA82301232222225353FF7E29A84D28FD0D%FFCFC6C6CEFD16FF4D23224DFD29FF29232278FD19FF7E2223224D7EFFA9%7829232253224D532329FD0BFFC8FEC9FF295353FD12FFA9222322FD28FF%2223227EFD1AFF4D22222977FFA82922222223222222234DA9FD0CFFC8C7%FFA2777EFD13FF232222A8FD26FF2923227EFD1BFF53227EFFFF7E4D2223%22232223222353FD05FF7EFF7E5353A2A8FFFFFFCFCB77A9FD14FF292322%A8FD25FF2923227EFD1CFF29A87E5322232222012322532923222353A27E%77222328220123222222535377222322234DFF772253FD0EFF4D012353FD%24FF4D232278FD1EFFCB784D4D22232223297EFF782223224D4D78535329%23222322232223222322232223227ECB29227EFD0EFF53232278FD17FFA8%772223224D7EFD05FF53222253FD1CFFA8772223222222232222222322FF%FFA8224D7EFD06FFA97EA87E77537853774D232222A87E22224DFD0EFF77%222353FD12FF7EA253532223222322232223287ECBFFFFFF7E7EFD1CFF77%2922232223222322294D4D537EFD04FFCBFD10FFA9534D4DFF2923222322%5353A8FD0AFF5323227EFD12FFA853532222012322220123222201232978%A8FD1DFF77232223222201537EFD20FF4D01297E7728232222287E7EFD06%FF78222253FD16FFA87E4D2322232223222322232223224D53A27ECBFD14%FF7E5353FFA8A97E294DFD23FF29237EFD04FFA97753222322787EFFFFFF%7E4D22A2FD1AFFA2534D222222232222222322222223222222232222224D%297777A9FD06FF7E7E532922234D7E22297EFD24FFA97EFD09FF7E532223%22537EFFFFA8A8FD1EFF7E78222322232223222322232223222322232223%2223224D77FD08FF78222329232229A8FD31FFA2782923227ECBFD22FFA8%7E2923012322220123222201232222012322220123227EFD06FFA8220123%22220123A8FD33FF7E5301234DA9FD1DFF7E7EA8FD04FFA9534D22232223%2223222322232223222322232253A9FD04FFA2222322232223224D4D4D29%78A8FD31FF53292278A9FD1AFFA8292229FD08FF53532222222322222223%222222232222222953A8FFA9282222232222222322222223222222537EFD%2BFF7E7EFFFFA877222353FD19FF7822237EFD0BFF7E5322232223222322%232223222322232223222322232223222322232223222322232223224D53%A9FD27FF53224DFD04FF532329A8FD17FF222222FD0FFF7E7E2923012322%220123222201232222014D22220123222201232222012322220123222201%2329787EFD23FF012328FD05FF7E232253FD15FF5323227EFD14FF7E784D%532223224D4D7877A9FFA829232223222322232223222322232223222322%232223224D53A2A9FD1DFF7723227EFD06FFCB4D2278FD14FF292229FD24%FF7E53222222232222222322222223222222232222222322222223224D28%7853A27EA9FD15FF292223A8FD07FFA84D2253FD12FFA2222353FD27FF7E%532223222322232223222322232223222322232223222322232223222322%23222322534D4D29534D4D29534D53A9FD04FFA922234DFD09FFA823227E%FD11FF292201A9FD2AFFA8A27E7753785377534D28290123222201232222%0123222201232222012322220123222201232222014DA8FD05FF282322A2%FD0AFF4D2201A9FD0FFFCB23224DFD38FFA87E5353222322232223222322%23222322232223222322232223227EFD06FF7E23224DFD0BFFA2222353FD%0FFF7E222253FD3EFFA27E78534D282322222223222222232222224D77FD%08FF4D22237EFD0BFFA222224DFD0FFF4D2322A9FD46FFCBA87EA97EA87E%A97EFD0AFFA922234DFD0DFF222322FD0FFF290123FD5AFF222322A9FD0C%FF7E232222FD0FFF22234DFD59FF53232278FD0DFF7E222322FD0EFF7E22%2253FD58FFA222224DFD0EFF4D232223FD0EFFA2222353FD57FFA94D2229%A2FD0DFFCB29222353FD0EFF5323227EFD57FF4D012353FD0EFF78222222%FD0FFF7E22237EFD56FF7E222353FD0FFF222329A9FD0FFF532322A2FD55%FFA8222222FD0FFF282953FD11FF7822237EFD54FFA9222322A9FD0EFFCB%A8FD05FF7EA27EA27EA27EA27EA27EA27EA24D2201537EA27EA27EA27EA2%7EA27EA27EA27EA27EA27EA27EA27EA27EA27EA27EA27E7E5378537E53A2%7EA27EA27EA27EA27EA27EA27EA27EA27EA27EA27EA27EA27EA27EA27EA2%7EA27EA27EA27EA27EA27EA27EA27E7E2222227E7EA27EA27EA27EA27EA2%7EA27EA2FD08FF2322232223222322232223222322232223222322232223%222322232223222322232223222322232223222322232223222322232223%222322232223222322232223222322232223222322232223222322232223%222322232223222322232223222322232223222322232223222322232223%22232223222322FD08FF2229537753785377537853775378537753785377%53785377537853775378537753785377537853775378537753785377534D%222222232222222322222223222222232222222322222223222222232222%222322222223222222232222222322222223222222232222222322222223%22222223222222232222FD08FF2329FD1CFFCB7EFD11FF53232223222322%232223222322232223222322232223222322232223222322232223222322%232223222322232223222322232223222322232223222322232223222322%23222322FD08FF224DFD12FFA87EA8FD07FF7E2329FD10FF770123222201%29537722232829224D224D224D2822284D224D284D224D53532229284D28%2201232829224D224D224D222928234D774D232829224D22292223282901%2322220123FD08FF2329FD05FF2953FD08FFA8782923224D7EFD05FFA8FF%224D5353FD09FF787EFFFFFF53232223224DFD04FF4DFF537EFF23FF7E7E%FF53FF7E78FFFFFF53FFFFFF787EFFFFFF222322A8A8A9FF78FF7EFF4D7E%FF53FFA8FF53FF7E53FF787EA922FF53232223222322FD08FF224DFD05FF%4D29A27EA9FFFF7E53FF4D224D4D772253FFFFFF5322227E29297EA8FFFF%FF774DA87E7E7E2229A8FFFF772223222228FF7E4D5353FD04FF22FF53A8%FFFFFFA853FF7E7E28FFA87E28A2FFA85322222353FFA8FFFFA853FF29A2%FF53FFFF7729FD04FF53A27E23FF77222322222223FD08FF234DFFFFA2A8%FF2823222322A9FFA822534D23297E7E2353FFFFFFA9A97E7822237EFFFF%FF7E2322A229232229294DA9FF53232223224DFFA977A84DFF7EA8FF23FF%787EFFCBFF7E7EFF784D537EA9FFA97EFF535322232253FFFFA8FF7778FF%7ECBFF29A97EFF53FFA87EFF7E7EFF53FF53232223222322FD08FF014DFF%FF282328222223227EFFFF7E2229232222A8A22277FFFFFFA24D23222201%A9FFFFFF7E282229232222224D7EFFFF782222012322A8FFFFA24DFF7853%FF01FF53A2FF53FFA253FFFFFF29FFFFFF53A2FFFFFF23222201FFA87EFF%5322FFFFFF534DFFFFFF4DFFA228FF5378FFFFFF4D222201232222FD08FF%234DFFFF5322292223224DFFFFFFA8227822232223532353FF7E29224D53%23292378FD04FF4D22A2224D4D784DFFFFFF53232223222322534D232253%294D29234D4D2953224D294D4D4D294D224D2923294D295322232223294D%2253222322532923224D4D4D22532929294D224D294D22232223222322FD%08FF224DFFFF534D28222253A2FFFFFF7E22284D222222782253FFFF4DA9%2923224D224DFD04FF292222237E782253FFFFFF78222222532222222353%7753782253532322772823224D5378224D53294D77227829222223535322%234D774D23225353232277535322535378534D534D227753784D29534D22%22FD08FF2329FD04FFCB294DFD05FFA92229294D222322234DFD04FF4D22%237E5322CBFFFFFF78294D22FFFF4D53FFFFFF53232278FFFF292322FD04%FF53FFFF4D53FF78224DFFFFFFCB53FF29A9FF4DFF7E22234DFFFF2953FF%FFFF5329FFFF4D53FFFFFFA97EFF7EA953FF7E7EFFA8A2FF7EFF292322FD%08FF224DFD05FF5328FD05FFA84D2222282322220153FD04FF222322A97E%2253FFFFFF5378A8227D29227EFFFFFF77012377FFA853222201A2FF224D%FFA87E28FF532253FF534D5378FD04FF28FF5323227EA8FF53A2FF4D5353%4DFFA87E28FF4DFFFFA2FFA25378FFFF7EFF7E4DFFFF77220123FD08FF23%29FD05FF534DFD05FF53222322234DA2294D7EFD04FF4D22A9FFFF532353%FFFFA97EFF7EFFA9FD05FF532329FFA9FFFF4D22237EFF22A9FFFFFF53FF%782278FFA87EA953FF7EFFFF4DFF7E2229A9FFFFA97EFF78A877A9FFFFA9%53FF7EFFFF7EFF7E7E77FFA9FFFFA8227EFF29222322FD08FF224DFD05FF%7829FD05FF7E7E7EA9FD0AFF7E7EFD04FF777EFD0DFF77222377FFA8FF4D%2222A8FF29FFA877FF53FF532222A9FFFF7778FF4D7EFF29FF53234DFF77%A8FF53A8FFFF53FFA877FF53FFFFFF4DA8FFFFFF7EFF7EA8A87E2253FF22%222223FD08FF234DFD05FF5353FD28FF5323222329232223222322232223%2223222322232223224D2923222322232223222322232223222322292929%222322232223222322232223222322232223222322232223222322FD08FF%014DFD05FF7728FD28FF7822220123222201232222012322220123222201%232222012322220123222201232222012322220123222201232222012322%220123222201232222012322220123222201232222FD08FF232223222322%232223222322232223222322232223222322232223222322232223222322%232223222322232223222322232223222322232223222322232223222322%232223222322232223222322232223222322232223222322232223222322%232223222322232223222322232223222322232223222322FD08FF284D29%4D284D294D284D294D284D294D284D294D284D294D222322222229294D28%4D294D284D294D284D294D284D294D284D22232229224D284D294D284D29%4D284D294D284D294D284D222322232223224D294D284D294D284D294D28%4D294D284D294D284D294D284D294D284D294D284D294D284D294DFD21FF%A8532223222353A8FD25FFCB7E4D222322234DA9FD4CFF7E222201232229%53FD20FFA8532901232222227EA8FD50FF7E4D22232223224D77A9FD18FF%7E784D4D22232223297EA8FD55FFA84D23222322222223295353A8A8FD0B%FFA2A277784D292223222222234D78A8FD5BFFA24D4D2223222322232223%222322534D4D295322232223222322232223225353A8FD62FFA97E772829%22220123222201232222012322220123284D537EA8FD40FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2010-10-29T11:22:20-07:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>212</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA1AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYqx&#xA;/wA4eStK8z2QjneWy1GCpsNXs3MN3bP1DRyLQ0r1U7HLsOc4z3jqDyKQaeLx/m/+YH5X+Z08t/mQ&#xA;h1jRZT/oOvxIFmaGtPU2osnHbmh+MeLbV2v5LFqIceL0y7m3gEhYe/6Zqen6pp9vqGn3CXVjdIJb&#xA;e4iPJHRuhBzTSiYmjzaUTkVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;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&#xA;sVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -369.252 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 369.252 li
453.193 369.252 li
453.193 0 li
cp
clp
[1 0 0 1 0 0 ]ct
404.811 155.88 mo
411.334 170.531 413.258 186.445 411.131 202.771 cv
408.18 201.537 405.188 200.367 402.182 199.254 cv
403.207 185.586 401.154 172.297 395.658 159.955 cv
385.447 137.021 364.848 120.74 338.15 111.79 cv
337.697 109.12 337.355 106.725 337.355 105.479 cv
337.355 105.14 337.463 104.239 337.631 103.061 cv
368.951 111.95 393.223 129.855 404.811 155.88 cv
404.811 155.88 li
cp
407.104 221.131 mo
392.59 268.482 346.494 316.604 281.865 345.381 cv
186.305 387.93 86.4214 372.072 58.7646 309.961 cv
45.7891 280.822 51.0171 246.68 70.0913 214.248 cv
77.7046 216.328 li
60.1128 246.768 55.4023 278.725 67.5669 306.041 cv
93.7886 364.928 188.49 379.961 279.092 339.619 cv
342.252 311.496 386.744 263.887 399.018 217.678 cv
401.727 218.75 404.424 219.896 407.104 221.131 cv
407.104 221.131 li
cp
86.6934 190.633 mo
97.2178 177.84 109.893 165.615 124.416 154.421 cv
127.481 155.092 130.56 155.529 133.52 155.772 cv
118.394 166.985 105.262 179.371 94.4785 192.385 cv
91.8594 191.846 89.2241 191.254 86.6934 190.633 cv
86.6934 190.633 li
cp
199.556 113.204 mo
219.719 105.767 239.863 100.883 259.275 98.4395 cv
261.111 100.043 262.285 102.766 263.836 104.523 cv
262.201 104.449 260.625 104.73 259.244 105.306 cv
248.4 106.596 237.309 108.692 226.106 111.615 cv
223.985 110.815 221.907 109.995 221.235 109.995 cv
218.264 109.995 215.578 111.638 214.132 115.045 cv
210.369 116.22 206.599 117.487 202.828 118.849 cv
201.999 116.848 200.896 114.919 199.556 113.204 cv
199.556 113.204 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
1 1 0 .25 cmyk
ef
167.348 90.085 mo
153.564 61.2134 141.808 35.0605 126.909 20.9868 cv
126.909 20.9868 119.738 10.3369 105.609 0 cv
121.321 4.53369 129.547 10.3369 138.398 25.5205 cv
145.207 37.1982 166.414 81.0532 170.198 88.8979 cv
174.768 87.3784 178.962 88.4497 179.625 90.3735 cv
179.799 90.8809 179.711 90.687 179.402 91.2813 cv
177.581 90.731 174.62 90.9585 171.51 92.0293 cv
168.065 93.2153 165.403 95.103 164.525 96.7964 cv
163.621 96.5234 162.997 96.0586 162.774 95.4106 cv
162.237 93.8525 164.18 91.7041 167.348 90.085 cv
167.348 90.085 li
cp
f
322.693 171.297 mo
324.166 171.297 li
324.166 175.243 li
324.98 175.243 li
324.98 171.297 li
326.457 171.297 li
326.457 170.594 li
322.693 170.594 li
322.693 171.297 li
322.693 171.297 li
cp
f
326.982 175.243 mo
327.758 175.243 li
327.758 171.655 li
329.059 175.243 li
329.73 175.243 li
331.02 171.655 li
331.033 175.243 li
331.807 175.243 li
331.807 170.594 li
330.674 170.594 li
329.424 174.234 li
328.129 170.594 li
326.982 170.594 li
326.982 175.243 li
326.982 175.243 li
cp
f
371.965 235.002 mo
371.965 235.002 317.127 237.084 277.92 228.016 cv
238.715 218.947 222.662 212.83 222.662 212.83 cv
214.577 214.799 li
214.577 214.799 212.937 211.518 207.477 206.059 cv
202.017 200.598 197.212 200.926 197.212 200.926 cv
198.408 209.338 li
187.816 199.074 li
187.816 199.074 182.895 201.582 180.059 201.91 cv
177.223 202.238 169.139 203.551 169.139 203.551 cv
169.139 203.551 190.323 200.27 187.488 212.83 cv
184.652 225.391 172.419 218.947 165.319 214.799 cv
158.218 210.65 152.808 202.371 116.716 202.238 cv
87.4438 202.129 63.1494 189.99 63.1494 189.99 cv
63.1494 189.99 56.8091 185.889 48.9004 189.541 cv
40.1348 193.588 25.5156 194.484 25.5156 194.484 cv
25.5156 194.484 97.8276 213.275 105.795 216.111 cv
113.764 218.947 152.758 231.297 170.451 229.328 cv
188.144 227.359 190.112 224.734 190.112 224.734 cv
190.112 224.734 207.594 237.951 234.895 238.279 cv
262.195 238.607 275.412 242.543 275.412 242.543 cv
275.412 242.543 337.773 252.906 352.303 246.578 cv
366.832 240.252 371.965 235.002 371.965 235.002 cv
371.965 235.002 li
cp
ef
431.586 276.898 mo
431.586 276.898 449.18 257.104 440.148 237.422 cv
429.258 213.682 366.969 198.951 346.5 194.699 cv
344.494 199.789 341.441 203.189 339.316 202.498 cv
336.965 201.734 336.639 196.256 338.586 190.26 cv
340.533 184.266 344.018 180.026 346.369 180.79 cv
348.436 181.461 348.939 185.777 347.707 190.881 cv
370.24 195.621 441.619 212.93 451.424 243.801 cv
460.521 272.443 431.586 276.898 431.586 276.898 cv
431.586 276.898 li
cp
f
305.666 154.292 mo
305.666 154.292 305.582 138.907 313.096 133.974 cv
316.914 131.467 320.523 130.811 320.523 130.811 cv
320.523 130.811 319.094 130.482 315.602 124.038 cv
312.111 117.594 311.127 113.118 311.127 113.118 cv
311.127 113.118 303.158 114.969 295.402 110.821 cv
287.645 106.673 291.465 94.769 279.889 91.1602 cv
275.492 89.7896 259.572 89.6367 259.572 89.6367 cv
259.572 89.6367 266.461 93.2451 270.281 101.541 cv
274.1 109.837 274.428 114.313 274.428 114.313 cv
261.867 112.133 li
261.867 112.133 262.852 121.858 273.771 119.234 cv
284.693 116.609 292.367 112.042 300.205 116.938 cv
306.322 120.757 303.254 125.233 302.385 132.99 cv
301.518 140.747 305.666 154.292 305.666 154.292 cv
305.666 154.292 li
cp
0 .2 1 0 cmyk
f
317.898 177.445 mo
317.898 177.445 299.762 169.477 309.158 150.472 cv
318.555 131.467 335.709 132.123 313.422 111.805 cv
291.137 91.4883 285.35 90.5039 285.35 90.5039 cv
285.35 90.5039 294.09 85.8164 293.762 77.0757 cv
293.434 68.335 292.777 58.3989 292.777 58.3989 cv
292.777 58.3989 302.598 81.0122 314.619 83.52 cv
326.639 86.0278 335.592 82.8638 335.592 82.8638 cv
335.592 82.8638 327.623 99.3613 330.787 113.774 cv
333.951 128.186 336.688 146.453 325.982 152.651 cv
311.455 161.064 317.898 177.445 317.898 177.445 cv
317.898 177.445 li
cp
f
232.598 172.969 mo
232.598 172.969 231.402 177.117 228.451 178.757 cv
225.498 180.397 212.609 184.545 212.609 184.545 cv
233.582 183.889 li
205.836 188.693 li
205.836 188.693 200.165 190.451 198.196 192.959 cv
196.228 195.465 192.62 198.09 192.62 198.09 cv
192.62 198.09 198.853 196.449 202.672 198.09 cv
206.493 199.73 207.805 202.238 207.805 202.238 cv
207.805 202.238 213.593 196.334 224.514 194.482 cv
235.434 192.631 242.535 192.631 242.535 192.631 cv
243.846 186.842 li
235.762 187.498 li
253.244 178.101 li
247.994 184.545 li
258.375 191.318 li
264.82 186.514 li
264.82 186.514 274.428 184.662 281.201 186.514 cv
287.973 188.365 317.57 189.35 317.57 189.35 cv
319.867 185.857 li
321.391 191.646 li
330.787 194.482 li
334.936 182.249 li
323.359 179.413 li
315.93 183.561 li
315.93 183.561 304.826 181.337 294.09 178.757 cv
288.629 177.445 286.332 182.905 286.332 182.905 cv
280.873 179.413 li
280.873 179.413 280.225 183.085 268.969 183.561 cv
261.211 183.889 260.227 181.381 260.227 181.381 cv
259.9 177.117 li
269.297 171.984 li
263.18 170.016 li
256.408 174.937 li
258.375 168.165 li
252.26 167.508 li
246.799 176.46 li
247.666 166.524 li
247.666 166.524 243.635 170.344 240.355 171 cv
237.074 171.656 232.598 172.969 232.598 172.969 cv
232.598 172.969 li
cp
1 1 0 .25 cmyk
f
222.631 151.042 mo
222.631 135.907 li
222.631 130.986 214.47 124.258 214.47 124.258 cv
227.138 129.498 li
227.138 129.498 228.123 126.663 226.81 124.038 cv
225.498 121.414 221.021 117.267 221.021 117.267 cv
231.285 122.398 237.73 119.234 241.879 124.366 cv
245.578 128.942 244.502 134.302 244.502 134.302 cv
244.502 134.302 254.111 134.419 256.08 138.567 cv
258.049 142.715 256.408 147.847 256.408 147.847 cv
253.244 140.747 li
247.666 145.551 li
246.799 137.911 li
246.799 137.911 244.061 136.831 241.551 139.435 cv
238.387 142.715 235.551 139.879 233.582 142.715 cv
231.613 145.551 229.646 148.175 229.646 148.175 cv
229.646 148.175 232.783 142.648 229.646 140.747 cv
224.073 137.368 222.631 151.042 222.631 151.042 cv
222.631 151.042 li
cp
ef
215.89 157.127 mo
215.89 157.127 217.741 162.26 223.529 164.228 cv
229.318 166.196 237.074 167.508 237.074 167.508 cv
237.074 167.508 230.303 168.376 225.169 169.688 cv
220.038 171 216.546 171.984 216.546 171.984 cv
224.842 172.969 li
224.842 172.969 218.186 175.148 214.577 177.445 cv
210.969 179.741 206.165 183.561 206.165 183.561 cv
206.165 183.561 207.032 170.016 210.969 166.196 cv
214.905 162.376 215.89 157.127 215.89 157.127 cv
215.89 157.127 li
cp
f
201.032 135.287 mo
201.032 135.287 197.424 134.514 192.292 138.779 cv
187.16 143.043 186.175 147.847 186.175 147.847 cv
189.784 152.323 li
189.784 152.323 190.44 146.324 195.244 143.043 cv
200.048 139.763 204.524 138.779 204.524 138.779 cv
201.032 135.287 li
201.032 135.287 li
cp
f
92.2505 123.71 mo
92.2505 123.71 91.8745 119.068 95.7427 116.281 cv
99.6792 113.446 107.975 111.477 107.975 111.477 cv
107.975 111.477 95.2031 112.345 85.8062 108.525 cv
76.4092 104.705 66.145 94.1128 66.145 94.1128 cv
66.145 94.1128 68.8647 111.053 75.8701 116.609 cv
84.8223 123.71 92.2505 123.71 92.2505 123.71 cv
92.2505 123.71 li
cp
0 .2 1 0 cmyk
f
182.027 135.615 mo
176.239 118.906 li
176.239 118.906 162.136 127.262 142.494 121.414 cv
115.732 113.446 109.615 99.2446 109.615 99.2446 cv
109.615 99.2446 111.467 112.79 107.975 117.266 cv
104.483 121.742 92.5786 127.53 92.5786 127.53 cv
92.5786 127.53 105.023 131.467 125.996 130.154 cv
146.97 128.842 159.202 127.53 159.202 127.53 cv
159.202 127.53 157.022 132.779 148.61 135.943 cv
140.197 139.106 130.917 140.091 130.917 140.091 cv
131.784 133.646 li
114.091 143.043 li
114.091 143.043 145.658 157.456 157.234 139.763 cv
168.033 123.258 182.027 135.615 182.027 135.615 cv
182.027 135.615 li
cp
f
186.503 114.313 mo
196.884 131.139 li
196.884 131.139 199.392 123.382 193.276 116.609 cv
190.517 113.555 186.503 114.313 186.503 114.313 cv
186.503 114.313 li
cp
1 1 0 .25 cmyk
f
177.551 98.5884 mo
177.551 98.5884 172.091 96.9487 170.451 101.213 cv
173.075 110.821 li
176.239 106.345 179.52 106.345 181.699 106.345 cv
177.551 98.5884 li
177.551 98.5884 li
cp
f
2.9082 285.814 mo
191.644 285.814 li
191.644 342.695 li
2.9082 342.695 li
2.9082 285.814 li
2.9082 285.814 li
cp
0 0 0 0 cmyk
f
5.8166 lw
0 lc
0 lj
3.86366 ml
[] 0 dsh
true sadj
2.9082 285.814 mo
191.644 285.814 li
191.644 342.695 li
2.9082 342.695 li
2.9082 285.814 li
2.9082 285.814 li
cp
1 1 0 .25 cmyk
@
178.645 285.814 mo
421.748 285.814 li
421.748 342.695 li
178.645 342.695 li
178.645 285.814 li
178.645 285.814 li
cp
f
178.645 285.814 mo
421.748 285.814 li
421.748 342.695 li
178.645 342.695 li
178.645 285.814 li
178.645 285.814 li
cp
@
209.227 302.314 mo
208.828 298.432 206.246 296.145 201.629 296.145 cv
197.41 296.145 194.094 299.188 194.094 304.078 cv
194.094 308.988 197.117 312.053 202.111 312.053 cv
206.1 312.053 208.891 309.703 209.331 305.799 cv
204.567 305.799 li
204.378 307.248 203.623 308.359 202.028 308.359 cv
199.509 308.359 199.047 306.365 199.047 304.246 cv
199.047 301.328 200.097 299.838 201.839 299.838 cv
203.392 299.838 204.378 300.74 204.525 302.314 cv
209.227 302.314 li
209.227 302.314 li
cp
0 0 0 0 cmyk
f
216.917 311.654 mo
216.917 305.799 li
221.598 305.799 li
221.598 311.654 li
226.551 311.654 li
226.551 296.543 li
221.598 296.543 li
221.598 301.643 li
216.917 301.643 li
216.917 296.543 li
211.964 296.543 li
211.964 311.654 li
216.917 311.654 li
216.917 311.654 li
cp
f
230.15 296.543 mo
235.104 296.543 li
235.104 311.654 li
230.15 311.654 li
230.15 296.543 li
230.15 296.543 li
cp
f
243.361 296.543 mo
238.723 296.543 li
238.723 311.654 li
243.467 311.654 li
243.467 306.869 li
243.277 303.428 li
248.672 311.654 li
253.309 311.654 li
253.309 296.543 li
248.566 296.543 li
248.566 301.35 li
248.756 304.791 li
243.361 296.543 li
243.361 296.543 li
cp
f
269.521 311.654 mo
269.521 308.129 li
261.861 308.129 li
261.861 305.758 li
268.094 305.758 li
268.094 302.23 li
261.861 302.23 li
261.861 300.07 li
269.229 300.07 li
269.229 296.543 li
256.908 296.543 li
256.908 311.654 li
269.521 311.654 li
269.521 311.654 li
cp
f
285.063 300.93 mo
284.707 298.285 282.797 296.145 278.598 296.145 cv
274.82 296.145 272.051 297.762 272.051 300.973 cv
272.051 306.744 280.74 305.17 280.74 307.457 cv
280.74 308.17 279.922 308.568 278.682 308.568 cv
278.199 308.568 277.676 308.443 277.275 308.191 cv
276.857 307.939 276.563 307.541 276.457 306.996 cv
271.715 306.996 li
271.82 309.723 274.422 312.053 278.41 312.053 cv
282.564 312.053 285.482 310.354 285.482 306.848 cv
285.482 301.35 276.793 302.756 276.793 300.488 cv
276.793 299.943 277.275 299.629 278.367 299.629 cv
278.85 299.629 279.291 299.713 279.648 299.902 cv
280.004 300.09 280.277 300.404 280.361 300.93 cv
285.063 300.93 li
285.063 300.93 li
cp
f
300.939 311.654 mo
300.939 308.129 li
293.279 308.129 li
293.279 305.758 li
299.512 305.758 li
299.512 302.23 li
293.279 302.23 li
293.279 300.07 li
300.646 300.07 li
300.646 296.543 li
288.326 296.543 li
288.326 311.654 li
300.939 311.654 li
300.939 311.654 li
cp
f
324.768 296.543 mo
320.676 296.543 li
318.871 305.883 li
318.828 305.883 li
317.129 296.543 li
312.344 296.543 li
316.1 311.654 li
320.969 311.654 li
322.689 302.881 li
322.732 302.881 li
324.475 311.654 li
329.344 311.654 li
333.1 296.543 li
328.314 296.543 li
326.615 305.883 li
326.572 305.883 li
324.768 296.543 li
324.768 296.543 li
cp
f
335.258 305.064 mo
335.258 310.27 337.859 312.053 342.541 312.053 cv
347.557 312.053 349.801 309.934 349.801 305.086 cv
349.801 296.543 li
344.85 296.543 li
344.85 305.59 li
344.85 307.227 344.324 308.359 342.541 308.359 cv
340.504 308.359 340.211 307.08 340.211 305.59 cv
340.211 296.543 li
335.258 296.543 li
335.258 305.064 li
335.258 305.064 li
cp
f
365.867 300.93 mo
365.51 298.285 363.602 296.145 359.404 296.145 cv
355.625 296.145 352.855 297.762 352.855 300.973 cv
352.855 306.744 361.543 305.17 361.543 307.457 cv
361.543 308.17 360.725 308.568 359.486 308.568 cv
359.004 308.568 358.48 308.443 358.08 308.191 cv
357.662 307.939 357.367 307.541 357.264 306.996 cv
352.52 306.996 li
352.625 309.723 355.227 312.053 359.215 312.053 cv
363.369 312.053 366.287 310.354 366.287 306.848 cv
366.287 301.35 357.598 302.756 357.598 300.488 cv
357.598 299.943 358.08 299.629 359.172 299.629 cv
359.654 299.629 360.096 299.713 360.453 299.902 cv
360.809 300.09 361.082 300.404 361.166 300.93 cv
365.867 300.93 li
365.867 300.93 li
cp
f
373.938 311.654 mo
373.938 305.799 li
378.617 305.799 li
378.617 311.654 li
383.57 311.654 li
383.57 296.543 li
378.617 296.543 li
378.617 301.643 li
373.938 301.643 li
373.938 296.543 li
368.984 296.543 li
368.984 311.654 li
373.938 311.654 li
373.938 311.654 li
cp
f
387.043 305.064 mo
387.043 310.27 389.645 312.053 394.326 312.053 cv
399.342 312.053 401.588 309.934 401.588 305.086 cv
401.588 296.543 li
396.635 296.543 li
396.635 305.59 li
396.635 307.227 396.109 308.359 394.326 308.359 cv
392.289 308.359 391.996 307.08 391.996 305.59 cv
391.996 296.543 li
387.043 296.543 li
387.043 305.064 li
387.043 305.064 li
cp
f
31.8872 308.047 mo
34.7124 308.047 li
34.7124 308.475 li
34.7158 309.252 31.9912 311.27 31.3745 311.27 cv
31.2593 311.27 31.1904 311.084 31.0752 311.084 cv
30.584 311.018 30.4302 309.887 30.4302 309.725 cv
30.4302 308.746 30.96 308.043 31.8872 308.047 cv
31.8872 308.047 li
cp
27.8726 297.49 mo
28.1201 297.49 29.8027 298.674 30.29 298.977 cv
30.29 300.41 li
30.292 300.688 30.7524 301.758 30.7524 302.863 cv
30.7524 303.539 li
30.7065 303.873 30.7524 303.918 30.7524 304.564 cv
30.7524 304.656 30.7949 304.781 30.874 304.91 cv
31.2964 304.715 33.7075 303.85 34.0991 303.85 cv
34.7329 303.85 li
34.8481 303.85 35.0557 303.758 35.2422 303.711 cv
37.3423 303.643 li
40.04 303.664 li
40.3638 303.705 43.1948 304.322 43.1948 305.578 cv
43.1948 305.768 42.9458 306.221 42.8833 306.365 cv
42.8491 306.84 42.5039 307.266 42.5039 307.514 cv
42.5039 310.398 35.0439 311.609 35.0366 312.113 cv
35.0776 312.15 35.1533 312.145 35.9849 312.145 cv
36.4536 312.219 37.0679 312.131 37.6177 312.525 cv
37.6177 313.498 li
37.6191 317.248 30.6313 316.543 30.3374 318.254 cv
30.2222 318.934 30.292 318.988 30.292 319.104 cv
30.292 319.219 30.4302 319.477 30.4302 319.592 cv
30.4302 321.379 li
30.4302 321.494 30.2456 321.938 30.2456 322.053 cv
30.2456 322.168 30.3838 323.527 30.3838 323.643 cv
30.3838 323.758 30.2456 324.633 30.2456 324.748 cv
30.2456 325.117 30.4761 326.16 30.4761 326.867 cv
30.4761 326.982 30.292 328.918 30.292 329.033 cv
30.292 329.148 30.2798 329.352 30.3027 329.49 cv
30.3823 329.809 30.3149 335.658 30.3838 338.102 cv
30.3315 338.381 30.2456 338.758 30.2456 338.977 cv
30.061 339.213 30.3379 340.797 30.3379 341.027 cv
30.3379 342.541 29.8311 341.297 29.8311 342.986 cv
29.8311 343.1 29.9233 343.33 29.9233 343.445 cv
29.9233 343.77 29.5547 343.838 29.4624 343.838 cv
29.1514 343.838 27.4893 342.23 27.2646 341.846 cv
27.0112 341.406 26.9854 340.961 26.9277 340.453 cv
26.8413 339.723 26.8354 339.506 26.8354 339.391 cv
26.8354 339.275 26.8813 339 26.8813 338.885 cv
26.8813 338.797 27.02 338.527 27.02 338.4 cv
27.02 338.285 26.9756 337.971 26.8823 337.736 cv
26.9277 326.318 li
26.8828 326.184 26.7896 325.93 26.7896 325.814 cv
26.7896 325.156 li
26.7896 325.041 26.605 324.219 26.605 324.104 cv
26.605 323.988 26.6973 323.297 26.6973 323.182 cv
26.6973 323.066 26.5361 322.59 26.5132 322.309 cv
26.4033 321.115 26.4209 320.578 26.4209 320.463 cv
26.4209 320.348 26.5132 319.795 26.5132 319.68 cv
26.5132 319.564 26.4673 318.992 26.3833 318.641 cv
25.793 318.643 25.6489 319.334 25.0557 319.332 cv
24.127 319.332 li
23.9346 318.951 23.3794 317.975 23.3794 317.674 cv
23.3794 317.559 23.4712 317.121 23.4712 317.006 cv
23.4712 316.891 23.2871 316.637 23.2871 316.521 cv
23.4253 316.338 23.6387 316.375 23.6226 316.109 cv
24.0366 316.066 li
24.0972 315.963 24.1733 315.828 24.3037 315.75 cv
24.3008 315.67 24.2549 315.582 24.2212 315.281 cv
24.2998 315.336 24.4854 315.277 24.6006 315.277 cv
24.7153 315.277 25.2456 315.416 25.3608 315.416 cv
25.8276 315.416 25.8677 314.932 25.8677 314.754 cv
25.8677 313.221 li
25.8677 312.721 26.0522 312.236 26.0522 311.684 cv
26.0522 311.568 26.0537 311.254 25.9785 311.037 cv
25.4175 311.631 25.1724 312.342 24.8325 312.826 cv
24.5903 313.172 23.4253 313.723 23.4253 314.287 cv
23.4253 314.402 23.5176 314.541 23.5176 314.656 cv
23.3794 315.693 li
23.3794 316.586 21.5415 317.674 21.0464 317.674 cv
20.4126 317.674 li
20.2974 317.674 19.8076 317.352 19.6929 317.352 cv
19.5771 317.352 19.3643 317.49 19.249 317.49 cv
18.7075 317.49 li
18.5518 317.49 18.1411 317.029 18.0601 317.041 cv
17.1616 317.189 16.4951 315.98 15.6548 316.182 cv
15.3745 315.934 15.2227 315.451 15.2227 315.141 cv
15.2227 315.025 15.1304 314.541 15.1304 314.426 cv
15.1304 313.619 15.5449 313.061 15.5449 312.42 cv
15.5449 312.305 15.4067 312.006 15.4067 311.891 cv
15.4067 310.975 15.8213 311.5 15.8213 310.369 cv
15.7295 308.619 li
15.7295 307.709 15.6973 307.838 16.252 306.707 cv
16.5693 306.859 17.1182 306.594 17.3555 306.34 cv
19.0342 306.229 20.1997 307.23 20.1987 308.717 cv
20.6748 309.223 20.8975 309.971 21.3765 310.623 cv
21.582 310.6 21.6255 310.682 21.6611 310.764 cv
22.0605 310.67 22.335 310.625 22.5962 310.549 cv
22.3652 310.238 22.5498 309.887 22.5571 309.523 cv
24.0151 309.65 25.355 308.391 26.0576 307.59 cv
26.5132 307.072 26.0981 306.568 26.0981 306.453 cv
26.0981 305.727 25.9136 305.82 25.9136 305.307 cv
25.9136 304.604 li
26.0059 304.355 25.9136 303.412 25.9136 303.297 cv
25.9136 303.176 26.0522 302.898 26.0527 302.818 cv
26.0527 301.805 li
25.9185 301.629 25.5449 301.406 25.5449 301.291 cv
25.5449 301.176 25.6836 300.877 25.6836 300.762 cv
25.6836 300.52 24.9922 300.244 24.9922 299.932 cv
24.9922 298.867 26.5693 298.727 27.1167 298.375 cv
27.165 298.227 27.5557 297.49 27.8726 297.49 cv
27.8726 297.49 li
cp
1 1 0 .25 cmyk
ef
77.2729 322.439 mo
77.2402 323.158 li
77.1133 322.939 76.9766 322.699 76.8335 322.441 cv
71.8276 322.439 li
72.2749 323.166 73.2305 325.023 73.1563 325.209 cv
73.2437 325.307 73.7554 325.744 73.7554 326.063 cv
73.7554 326.154 72.7705 326.521 72.4717 326.744 cv
72.9063 326.799 72.7891 327.113 73.1201 327.441 cv
73.6001 327.443 li
74.2798 327.443 li
74.3374 327.443 75.0859 327.678 75.2432 327.857 cv
76.9985 327.857 li
77.4941 327.859 78.2236 328.082 78.8457 328.301 cv
79.0132 328.359 79.3086 328.365 79.4238 328.365 cv
79.5391 328.365 80 328.227 80.1147 328.227 cv
80.8755 328.457 li
82.1255 328.457 82.8799 326.977 82.8799 325.809 cv
82.9546 322.439 li
77.2729 322.439 li
77.2729 322.439 li
cp
70.959 322.439 mo
70.6016 322.668 70.2231 322.967 70.105 323.137 cv
69.8677 323.203 69.5859 323.25 69.3682 323.258 cv
69.3301 323.373 69.1401 323.52 69.0552 323.596 cv
69.0942 323.625 69.1699 323.619 70.4634 323.619 cv
70.6328 323.66 71.8657 323.832 71.8657 324.541 cv
71.8657 324.559 71.2173 325.02 70.9692 325.389 cv
70.9116 325.475 70.4565 325.836 70.6216 326.088 cv
69.4614 327.098 69.1011 326.32 69.1011 327.629 cv
69.1011 327.744 69.0986 327.846 69.0449 327.947 cv
68.2271 328.014 67.624 328.549 66.7764 328.688 cv
64.5176 328.826 li
64.0059 328.889 63.813 329.057 63.4502 329.057 cv
62.8623 329.057 li
62.2056 329.057 61.7437 329.172 60.9238 329.334 cv
59.5415 329.379 li
58.4839 329.609 57.2734 329.896 56.1328 330.117 cv
55.4531 330.248 54.8843 330.209 54.769 330.209 cv
54.6538 330.209 53.8242 330.117 53.7095 330.117 cv
53.2539 330.117 53.0063 330.439 52.8564 330.439 cv
52.2056 330.439 52.3867 330.295 51.5049 330.156 cv
51.3364 329.541 50.5991 329.133 50.438 328.533 cv
50.3057 328.043 50.5298 327.885 50.4873 327.592 cv
50.8179 327.508 51.0142 327.174 50.9526 326.896 cv
51.0698 326.939 51.1411 326.893 51.2437 326.846 cv
52.1108 327.123 li
52.6021 326.736 59.896 324.449 61.2036 324.449 cv
62.2979 324.449 li
62.4131 324.449 62.6089 324.311 62.7241 324.311 cv
63.8188 324.311 li
64.0146 324.311 65.6274 323.988 66.0239 323.883 cv
66.27 323.584 66.645 323.059 67.0645 322.443 cv
70.959 322.439 li
70.959 322.439 li
cp
64.0811 322.439 mo
62.9731 323.223 62.0029 323.756 61.6528 323.756 cv
61.1377 323.756 li
61.0835 323.604 60.8521 323.389 60.8521 323.273 cv
60.8521 323.158 60.9443 322.928 60.9443 322.813 cv
60.9443 322.697 60.9907 322.518 60.7642 322.457 cv
60.7686 322.451 60.7729 322.445 60.7773 322.438 cv
64.0811 322.439 li
64.0811 322.439 li
cp
59.8535 322.439 mo
59.1968 323.76 56.1196 324.545 55.7627 324.631 cv
55.29 324.039 54.3428 323.342 54.1699 323.342 cv
54.0547 323.342 53.9165 323.436 53.8013 323.436 cv
53.792 323.436 53.4956 322.922 53.2256 322.436 cv
59.8535 322.439 li
59.8535 322.439 li
cp
ef
64.4468 311.73 mo
64.9995 311.73 65.1382 312.645 65.1382 312.766 cv
65.1382 313.182 63.9966 314.143 64.0732 314.441 cv
63.8018 314.105 63.7095 312.766 63.7095 312.65 cv
63.7095 312.316 64.1069 311.73 64.4468 311.73 cv
64.4468 311.73 li
cp
65.1074 307.402 mo
65.3223 307.559 65.4604 307.771 65.458 307.887 cv
65.458 309.555 li
64.8911 309.73 64.3433 309.682 63.7705 310.023 cv
63.6299 309.629 63.5986 309.123 63.2485 308.662 cv
63.7817 308.254 64.4155 307.904 65.1074 307.402 cv
65.1074 307.402 li
cp
71.2432 302.973 mo
71.3813 303.486 72.1655 303.389 72.2114 303.389 cv
72.3672 303.389 72.834 303.111 72.8799 303.111 cv
73.2139 303.111 74.5391 303.418 74.5391 304.01 cv
74.5391 304.477 72.7734 305.268 72.5879 305.414 cv
72.0181 305.414 li
71.9072 305.305 70.9902 304.172 70.9902 303.873 cv
70.9902 303.723 71.1577 303.355 71.2432 302.973 cv
71.2432 302.973 li
cp
60.7773 322.439 mo
61.1836 321.84 61.23 321.273 61.3726 320.959 cv
61.5225 320.631 61.9658 320.713 61.8218 320.361 cv
62.8711 319.916 64.5386 316.592 64.5386 316.199 cv
64.2856 316.061 64.1631 316.068 64.1226 316.184 cv
63.7656 317.197 61.7622 317.721 61.6816 317.721 cv
61.0308 317.721 60.9404 316.113 60.3984 316.146 cv
60.5767 315.814 60.6216 315.6 60.6216 315.486 cv
60.6216 315.26 60.5303 315.041 60.3003 314.803 cv
60.3003 314.465 li
60.522 314.137 60.4834 314.172 60.4834 313.918 cv
60.4834 313.803 60.3916 313.139 60.3452 312.721 cv
60.4429 309.371 li
60.0313 309.328 58.1792 309.426 58.1792 308.365 cv
58.3403 308.182 58.479 308.227 58.6084 308.229 cv
58.6401 308.02 58.457 307.43 58.3218 307.039 cv
58.4326 307.029 58.502 306.982 58.6172 306.982 cv
58.6343 306.982 59.3315 307.26 59.4233 307.26 cv
59.5791 307.26 64.124 305.531 64.124 304.887 cv
64.124 304.58 63.3638 303.758 63.1792 303.758 cv
63.064 303.758 62.5801 303.895 62.4648 303.895 cv
61.3823 303.895 60.8994 302.088 60.7603 301.701 cv
60.8525 301.424 60.8521 301.361 60.9673 301.361 cv
61.9038 300.416 63.6514 300.264 64.6558 299.67 cv
66.668 298.949 73.8994 296.385 76.9585 296.385 cv
78.9741 296.385 82.6489 298.613 83.0176 300.365 cv
83.1387 300.947 82.9722 301.039 82.9722 301.154 cv
83.1104 302.115 li
83.1104 302.23 83.2485 302.721 83.2485 302.996 cv
83.2485 304.195 83.2026 304.633 83.2026 304.748 cv
83.2026 304.863 83.1104 305.443 83.064 305.764 cv
83.0181 307.977 li
82.9717 308.209 82.8794 308.484 82.834 308.713 cv
82.9253 313.406 li
82.9697 313.494 83.0181 313.643 83.0181 313.734 cv
83.1563 317.098 li
83.1563 317.191 83.0645 317.305 83.0645 317.42 cv
83.0645 317.438 83.2544 317.773 83.2485 317.975 cv
83.0874 321.328 83.2485 319.766 83.2485 320.555 cv
83.2485 320.67 83.1089 321.301 82.9717 321.664 cv
82.9546 322.439 li
77.2729 322.439 li
77.3496 320.742 li
77.3955 320.514 77.4883 320.117 77.4883 320.002 cv
77.4883 319.184 77.6724 317.975 77.6724 317.121 cv
77.6724 317.006 77.5806 316.27 77.5806 316.154 cv
77.5918 315.371 li
77.3037 308.457 li
77.3037 305.428 77.6265 304.438 77.6265 302.375 cv
77.6265 300.762 75.8984 300.439 74.6079 300.439 cv
74.1816 300.439 67.9922 302.064 66.8936 302.779 cv
67.2974 302.904 67.2979 303.248 67.5493 303.545 cv
68.0317 304.607 69.2437 303.967 69.8843 304.84 cv
69.5889 305.277 68.8706 305.111 68.8706 305.693 cv
68.8706 306.389 71.9204 313.115 72.3203 313.658 cv
72.4858 313.324 72.6597 313.039 72.5107 312.807 cv
72.5562 312.682 72.5562 312.498 72.8799 312.328 cv
73.1274 312.328 73.2197 312.697 73.7358 312.512 cv
74.2534 312.785 li
74.2148 312.621 74.3071 312.436 74.416 312.324 cv
74.876 312.691 75.5063 313.199 75.5063 313.803 cv
75.5063 313.918 75.5527 314.057 75.5527 314.172 cv
75.5527 314.811 74.2622 317.029 74.2622 317.42 cv
74.2622 317.578 75.731 320.467 76.8335 322.441 cv
71.8276 322.439 li
71.7173 322.256 71.6377 322.145 71.6128 322.145 cv
71.4863 322.145 71.2285 322.271 70.959 322.441 cv
67.0645 322.439 li
68.2344 320.723 69.7461 318.299 69.7461 318.158 cv
69.7461 317.871 68.9941 316.529 68.7158 316.291 cv
68.6851 316.414 68.5942 316.619 68.5942 316.736 cv
68.5942 317.416 li
68.5942 318.752 66.1069 321.012 64.0811 322.441 cv
60.7773 322.439 li
60.7773 322.439 li
cp
53.2256 322.439 mo
52.9971 322.025 52.7876 321.633 52.7876 321.592 cv
52.7876 321.477 52.8799 321.314 52.8799 321.199 cv
52.8799 321.084 52.2344 320.256 52.2344 320.141 cv
52.2344 319.852 52.3267 319.246 52.3267 319.057 cv
52.3267 318.912 52.5303 318.547 52.605 318.514 cv
52.605 317.836 li
52.2808 314.75 li
52.2808 312.529 li
52.2808 312.369 52.3784 312.08 52.3843 311.799 cv
52.3901 311.43 52.5571 310.814 52.5571 310.699 cv
52.5571 309.258 li
52.5571 304.148 li
52.5571 304.033 52.7412 303.164 52.7422 303.049 cv
52.7422 302.451 li
52.5811 302.293 52.5112 302.053 52.5112 302.006 cv
52.5112 301.92 52.7759 301.545 52.9028 301.545 cv
53.6514 301.545 53.4917 302.123 54.5225 302.451 cv
56.5732 303.107 57.0732 304.086 57.0732 305.463 cv
57.0732 305.578 57.2114 305.699 57.2114 305.814 cv
57.2114 306.494 li
57.2114 306.609 57.396 307.053 57.396 307.168 cv
57.396 307.283 57.2114 307.398 57.2114 307.514 cv
57.2114 307.629 57.3843 307.781 57.3955 307.926 cv
57.4707 308.57 57.4419 309.104 57.4419 309.219 cv
57.4419 309.471 57.6724 309.621 57.6724 309.979 cv
57.6724 310.381 57.5508 310.078 57.7642 311.287 cv
57.9717 312.457 58.1152 313.631 58.4092 314.834 cv
58.5586 315.463 58.502 315.924 58.502 316.039 cv
58.502 317.098 59.147 317.854 59.147 318.596 cv
59.147 318.711 59.0986 318.814 59.0547 318.893 cv
59.2275 319.232 59.2852 319.523 59.2852 319.656 cv
59.2852 319.967 59.9766 321.246 59.9766 321.938 cv
59.9766 322.111 59.9326 322.279 59.8535 322.438 cv
53.2256 322.439 li
53.2256 322.439 li
cp
ef
109.431 292.975 mo
109.465 292.975 110.33 293.48 110.468 293.48 cv
110.583 293.48 111.274 293.158 111.39 293.158 cv
111.885 293.158 112.244 293.695 112.872 293.926 cv
113.396 294.115 114.243 294.027 114.768 294.418 cv
114.958 294.557 115.33 295.496 115.33 295.715 cv
115.33 295.83 115.191 296.938 115.191 297.053 cv
115.191 297.467 115.468 297.502 115.468 298.09 cv
115.468 298.203 115.33 299.68 115.33 299.795 cv
115.33 299.908 115.56 301.643 115.56 301.758 cv
115.56 302.715 li
115.56 302.898 115.883 304.459 115.879 304.477 cv
115.879 305.232 li
116.588 305.232 li
116.828 305.141 116.764 305.232 116.879 305.232 cv
117.467 305.232 li
118.031 305.232 118.095 306.033 118.093 306.229 cv
117.661 306.711 116.206 307.611 116.206 307.629 cv
116.206 307.818 116.482 308.625 116.482 308.717 cv
116.482 309.35 li
116.482 310.221 120.077 326.211 122.271 326.211 cv
122.386 326.211 123.4 325.98 123.516 325.98 cv
123.792 325.98 124.088 326.102 124.352 326.564 cv
125.338 326.15 126.534 328.471 126.534 329.414 cv
126.534 329.668 124.841 331.104 124.311 331.104 cv
123.337 331.104 120.921 329.346 120.7 329.184 cv
116.597 324.348 116.518 324.291 114.412 319.34 cv
114.592 318.566 113.541 315.6 113.458 315.416 cv
112.929 315.764 108.647 318.746 108.647 320.002 cv
108.647 320.117 108.682 320.186 108.694 320.785 cv
109.402 321.039 110.105 320.527 110.623 320.4 cv
110.583 320.605 110.491 320.83 110.491 320.945 cv
110.491 321.16 110.537 321.539 110.537 321.684 cv
110.537 321.799 110.675 321.914 110.675 322.029 cv
110.675 324.529 106.071 328.738 104.629 329.432 cv
104.455 329.643 103.227 331.039 102.628 331.037 cv
101.698 331.037 li
101.195 329.537 99.6152 325.434 99.6152 325.277 cv
99.6152 325.162 99.3848 324.955 99.3848 324.84 cv
99.3848 324.373 99.938 322.727 99.938 321.988 cv
99.938 321.332 li
100.675 318.02 li
100.675 317.904 100.445 317.168 100.445 317.053 cv
100.445 316.648 100.871 315.982 101.219 315.602 cv
101.563 315.83 101.701 315.416 102.302 315.418 cv
102.65 315.246 li
103.025 315.277 103.019 315.377 103.052 315.416 cv
103.417 315.277 103.671 315.416 103.786 315.416 cv
104.298 315.74 104.133 316.211 104.634 316.256 cv
104.113 317.859 103.901 317.535 103.901 318.734 cv
103.901 318.85 103.993 318.965 103.993 319.08 cv
103.993 319.328 103.486 320.883 103.486 321.477 cv
103.486 321.598 103.625 322.145 103.625 322.26 cv
103.625 322.375 103.486 322.611 103.486 322.727 cv
103.486 323.676 li
103.394 323.896 103.44 324.104 103.438 324.232 cv
103.907 324.264 105.836 323.314 105.836 323.158 cv
105.836 321.752 104.5 321.994 104.5 319.033 cv
104.5 318.918 104.592 318.711 104.592 318.596 cv
104.345 318.133 104.506 317.791 104.502 317.502 cv
104.977 317.172 106.205 314.311 106.205 313.227 cv
106.205 313.176 106.942 311.736 106.944 311.621 cv
106.944 311.35 106.989 311.314 106.874 311.314 cv
106.205 311.314 104.371 312.293 104.025 312.43 cv
102.942 312.881 101.876 313.324 100.846 313.768 cv
98.7432 314.678 96.1357 315.195 94.231 316.281 cv
94.1597 316.768 93.4746 317.029 93.0024 317.029 cv
92.3286 317.029 90.6289 314.713 90.6289 314.311 cv
90.6289 313.885 91.4126 313.395 91.4126 313.135 cv
91.4126 313.02 91.3667 312.908 91.3247 312.615 cv
91.4775 312.582 91.6006 312.678 91.7471 312.469 cv
92.4126 312.469 li
92.5117 312.566 92.6104 312.65 92.7261 312.65 cv
93.25 312.65 93.3389 312.541 93.8877 312.1 cv
93.9067 312.506 93.8374 312.605 94.1313 312.605 cv
94.9204 312.605 101.115 309.912 103.236 308.885 cv
105.184 308.264 111.182 305.906 111.182 305.393 cv
111.182 304.482 110.214 300.803 110.214 300.369 cv
110.214 300.254 110.03 299.201 110.03 299.086 cv
110.03 296.447 li
110.03 294.598 109.109 296.059 108.881 293.768 cv
109.151 293.648 109.329 293.291 109.251 293.029 cv
109.431 292.975 li
109.431 292.975 li
cp
111.715 310.025 mo
111.859 310.297 112.148 310.518 112.27 310.869 cv
112.615 311.865 112.794 312.945 113.067 314.008 cv
111.626 314.17 li
111.511 314.172 111.044 314.033 110.929 314.033 cv
110.813 314.033 110.03 314.219 109.915 314.219 cv
109.673 314.219 109.431 314.166 109.431 313.918 cv
109.431 313.527 111.217 310.563 111.715 310.025 cv
111.715 310.025 li
cp
104.085 300.301 mo
105.595 300.301 107.357 300.709 107.357 302.859 cv
107.357 304.195 106.441 303.656 105.362 304.908 cv
103.699 304.908 li
103.584 304.91 102.081 304.68 101.965 304.68 cv
101.781 304.68 100.479 305.002 100.462 305 cv
99.8579 305 li
99.3667 304.354 98.1396 303.791 97.3569 303.734 cv
97.4058 303.33 97.127 302.697 97.127 302.582 cv
97.127 302.529 97.3569 302.334 97.3618 302.219 cv
98.7896 302.295 102.167 300.301 104.085 300.301 cv
104.085 300.301 li
cp
121.989 298.182 mo
122.605 298.182 123.118 298.752 123.118 299.148 cv
123.118 300.18 120.658 302.098 119.725 302.098 cv
119.032 302.098 li
118.704 301.863 118.429 301.68 118.096 301.484 cv
118.188 301.232 118.648 300.094 118.648 299.816 cv
118.648 299.701 118.556 299.426 118.556 299.311 cv
118.556 299.021 119.771 298.457 120.168 298.457 cv
120.284 298.457 120.722 298.596 120.836 298.596 cv
121.562 298.508 li
121.758 298.227 121.874 298.182 121.989 298.182 cv
121.989 298.182 li
cp
ef
160.717 319.766 mo
160.699 319.855 160.688 319.928 160.688 319.961 cv
160.688 321.424 li
160.688 321.713 160.457 322.168 160.457 322.449 cv
160.457 323.268 li
160.457 323.445 159.753 324.494 159.626 324.619 cv
159.626 324.619 155.452 326.666 154.668 325.854 cv
154.513 325.691 154.322 325.324 154.022 325.324 cv
153.481 325.324 li
153.366 325.324 152.986 325.508 152.871 325.506 cv
152.447 325.506 li
152.174 324.547 151.034 324.76 150.412 324.617 cv
150.51 324.502 150.598 324.369 150.652 324.266 cv
151.903 324.266 li
152.283 324.264 156.678 322.508 156.679 321.896 cv
156.679 321.145 li
156.863 320.227 li
156.863 320.188 156.912 320 156.976 319.766 cv
160.717 319.766 li
160.717 319.766 li
cp
148.563 319.766 mo
148.501 320.287 147.922 320.947 147.922 322.313 cv
147.922 325.525 li
147.922 325.756 147.358 326.891 147.3 326.891 cv
146.724 326.891 145.447 324.631 145.344 324.574 cv
145.389 324.373 145.336 324.193 145.25 323.646 cv
145.204 323.363 144.973 322.934 144.973 322.818 cv
144.973 321.885 li
144.973 321.77 144.834 321.637 144.834 321.521 cv
144.834 321.406 145.019 320.416 145.019 320.301 cv
145.019 320.223 144.999 319.992 144.972 319.768 cv
148.563 319.766 li
148.563 319.766 li
cp
144.168 319.766 mo
143.597 320.152 142.959 320.771 142.653 320.992 cv
141.73 320.992 li
141.615 320.992 141.407 321.131 141.22 321.176 cv
140.526 321.176 140.526 321.131 140.461 321.121 cv
140.534 320.914 140.546 320.756 140.333 320.574 cv
140.042 321.176 139.535 322.225 139.535 322.865 cv
139.535 323.414 li
139.305 324.52 li
139.305 324.967 li
139.396 326.355 li
139.397 326.982 138.711 327.768 138.291 327.768 cv
137.727 327.768 137.415 327.109 137.415 326.689 cv
137.415 325.986 li
137.415 325.969 136.263 322.49 136.263 321.982 cv
136.263 321.867 136.586 321.182 136.586 321.066 cv
136.586 320.18 li
136.586 320.133 136.626 319.961 136.672 319.771 cv
144.168 319.766 li
144.168 319.766 li
cp
ef
143.136 308.51 mo
143.907 308.504 144.581 309.701 145.417 309.705 cv
146.03 309.705 li
146.03 311.654 li
146.033 312.047 144.593 313.99 144.46 314.072 cv
143.831 315.518 142.706 317.021 141.312 317.535 cv
140.966 317.477 li
141.179 316.975 141.655 315.203 141.655 315.047 cv
141.655 314.795 141.425 314.725 141.425 314.402 cv
141.425 314.287 141.471 314.01 141.517 313.457 cv
141.425 312.59 li
141.217 312.559 141.095 312.736 140.996 312.832 cv
140.697 312.832 li
140.917 312.377 142.715 310.168 142.715 309.979 cv
142.715 309.961 143.176 309.225 143.176 309.104 cv
143.176 308.988 143.13 308.711 143.136 308.51 cv
143.136 308.51 li
cp
136.672 319.766 mo
136.738 319.506 136.816 319.199 136.816 319.131 cv
136.816 318.383 li
136.816 318.268 136.949 318.117 136.955 317.973 cv
136.995 317.006 137 316.869 136.968 316.15 cv
136.905 316.213 135.877 316.66 135.641 316.66 cv
135.526 316.66 135.398 316.564 135.251 316.465 cv
135.251 315.434 li
135.25 315.318 134.881 314.725 134.881 314.609 cv
134.881 312.721 136.286 310.264 137.692 308.527 cv
137.243 308.504 136.688 308.73 136.623 308.914 cv
136.183 308.826 134.988 309.273 134.824 309.652 cv
134.397 309.656 134.356 309.887 134.115 309.885 cv
133.558 309.885 li
133.321 309.648 133.088 309.416 132.9 309.18 cv
132.9 308.521 li
132.899 308.008 133.129 307.945 133.131 307.15 cv
133.131 306.439 li
133.857 306.098 134.299 305.469 135.075 305.264 cv
135.162 305.148 135.25 305.023 135.253 304.873 cv
136.745 304.289 137.385 302.926 138.26 301.777 cv
138.733 301.867 139.351 301.959 139.466 301.959 cv
139.582 301.959 140.157 301.867 140.272 301.867 cv
140.912 301.867 141.713 302.693 142.299 303.404 cv
142.299 304.797 li
142.006 306.377 140.453 306.664 139.35 307.057 cv
139.482 307.174 139.679 307.443 139.794 307.445 cv
140.425 307.445 li
140.815 307.264 141.003 307.404 141.18 307.582 cv
141.903 307.582 li
143.439 307.414 144.299 307.213 145.002 307.215 cv
145.631 307.215 li
145.76 307.016 146.073 307.049 146.25 306.947 cv
146.31 306.541 146.355 305.836 146.355 305.721 cv
146.355 304.742 li
146.355 304.627 146.54 304.455 146.545 304.338 cv
146.545 303.299 li
146.988 303.494 146.874 303.297 147.023 303.297 cv
147.369 303.389 147.461 303.111 147.577 303.111 cv
147.992 303.111 148.678 303.551 149.246 303.586 cv
149.639 304.012 150.353 305.033 150.721 305.234 cv
150.888 305.32 151.126 305.277 151.302 305.291 cv
151.557 305.586 152.283 305.693 152.784 305.693 cv
153.804 305.693 157.461 301.268 157.461 300.277 cv
157.461 300.041 156.878 299.408 156.454 299.371 cv
159.005 299.057 li
160.48 299.057 163.084 300.484 163.084 302.236 cv
163.084 303.094 161.586 303.619 161.211 303.617 cv
160.426 303.617 li
159.958 303.209 160.031 303.158 159.673 303.158 cv
158.855 303.158 156.526 305.914 156.307 306.396 cv
156.477 306.43 156.747 306.43 156.862 306.43 cv
158.4 306.43 161.027 305.369 161.361 305.369 cv
161.995 305.369 li
162.11 305.369 162.946 305.186 163.061 305.186 cv
163.493 305.186 166.54 306.01 166.54 306.867 cv
166.54 307.375 164.235 307.736 164.092 308.404 cv
162.798 308.889 161.306 309.35 160.041 309.779 cv
160.495 310.758 161.194 311.281 161.148 312.354 cv
161.108 313.32 161.102 313.688 161.102 313.803 cv
161.102 313.918 161.01 314.311 161.01 314.426 cv
161.01 314.541 161.241 315.67 161.241 315.785 cv
161.241 315.9 161.188 316.27 161.148 317.283 cv
161.148 317.375 161.01 317.496 161.01 317.611 cv
161.01 318.199 li
161.01 318.461 160.797 319.342 160.717 319.76 cv
156.976 319.766 li
157.098 319.318 157.277 318.701 157.277 318.625 cv
157.277 317.83 li
157.277 317.715 157.398 317.234 157.416 316.959 cv
157.485 315.945 157.461 315.416 157.461 315.301 cv
157.461 315.186 157.6 314.961 157.6 314.846 cv
157.6 314.143 li
157.6 314.125 157.922 312.184 157.924 311.943 cv
157.924 310.244 li
156.88 310.209 153.141 311.5 153.083 311.5 cv
152.617 311.5 152.395 311.318 152.164 310.789 cv
152.164 310.404 li
152.346 310.047 152.303 309.965 152.255 309.857 cv
152.755 309.555 152.853 309.16 152.853 308.803 cv
152.853 308.688 152.945 308.457 152.945 308.342 cv
152.853 307.951 152.945 307.975 152.945 307.859 cv
152.853 307.535 152.945 307.744 152.951 307.629 cv
152.951 307.211 li
151.144 308.414 149.996 308.221 149.996 310.186 cv
149.996 310.555 150.832 311.084 151.085 311.086 cv
151.78 311.086 li
152.501 311.875 156.816 315.854 156.816 316.367 cv
156.816 316.92 li
156.594 317.305 156.125 317.26 155.941 317.26 cv
154.293 317.26 150.529 313.441 149.744 312.789 cv
149.598 312.961 149.397 313.988 149.397 314.293 cv
149.397 314.875 li
149.304 315.617 li
149.305 316.061 148.883 317.16 148.704 317.338 cv
148.66 318.16 148.706 318.527 148.706 318.643 cv
148.706 318.758 148.567 318.971 148.567 319.086 cv
148.567 319.674 li
148.567 319.701 148.565 319.73 148.563 319.76 cv
144.972 319.766 li
144.959 319.658 144.945 319.549 144.931 319.463 cv
144.729 319.449 144.457 319.58 144.168 319.773 cv
136.672 319.766 li
136.672 319.766 li
cp
ef
304.568 332.643 mo
305.135 330.648 li
310.066 330.648 li
310.654 332.643 li
315.586 332.643 li
310.172 317.531 li
305.135 317.531 li
299.721 332.643 li
304.568 332.643 li
304.568 332.643 li
cp
309.207 327.5 mo
306.08 327.5 li
307.611 322.086 li
309.207 327.5 li
309.207 327.5 li
cp
0 0 0 0 cmyk
f
331.404 323.303 mo
331.006 319.42 328.424 317.133 323.807 317.133 cv
319.588 317.133 316.273 320.176 316.273 325.066 cv
316.273 329.977 319.295 333.041 324.289 333.041 cv
328.277 333.041 331.068 330.691 331.51 326.787 cv
326.746 326.787 li
326.557 328.234 325.801 329.348 324.205 329.348 cv
321.688 329.348 321.227 327.354 321.227 325.234 cv
321.227 322.316 322.275 320.826 324.018 320.826 cv
325.57 320.826 326.557 321.729 326.703 323.303 cv
331.404 323.303 li
331.404 323.303 li
cp
f
337.211 332.643 mo
337.777 330.648 li
342.711 330.648 li
343.299 332.643 li
348.23 332.643 li
342.814 317.531 li
337.777 317.531 li
332.363 332.643 li
337.211 332.643 li
337.211 332.643 li
cp
341.85 327.5 mo
338.723 327.5 li
340.256 322.086 li
341.85 327.5 li
341.85 327.5 li
cp
f
356.324 332.643 mo
361.174 332.643 364.342 330.459 364.342 324.771 cv
364.342 319.799 361.32 317.531 356.451 317.531 cv
349.818 317.531 li
349.818 332.643 li
356.324 332.643 li
356.324 332.643 li
cp
354.771 321.057 mo
355.717 321.057 li
358.361 321.057 359.389 321.896 359.389 325.045 cv
359.389 327.898 358.129 329.117 355.82 329.117 cv
354.771 329.117 li
354.771 321.057 li
354.771 321.057 li
cp
f
378.984 332.643 mo
378.984 329.117 li
371.324 329.117 li
371.324 326.744 li
377.557 326.744 li
377.557 323.219 li
371.324 323.219 li
371.324 321.057 li
378.691 321.057 li
378.691 317.531 li
366.371 317.531 li
366.371 332.643 li
378.984 332.643 li
378.984 332.643 li
cp
f
385.631 332.643 mo
385.631 327.521 li
385.527 325.17 li
385.316 322.945 li
385.359 322.945 li
388.107 332.643 li
391.549 332.643 li
394.299 322.945 li
394.342 322.945 li
394.09 325.674 li
394.027 328.025 li
394.027 332.643 li
398.477 332.643 li
398.477 317.531 li
392.494 317.531 li
389.828 326.955 li
387.164 317.531 li
381.182 317.531 li
381.182 332.643 li
385.631 332.643 li
385.631 332.643 li
cp
f
410.369 327.061 mo
415.994 317.531 li
410.537 317.531 li
407.936 322.652 li
405.332 317.531 li
399.791 317.531 li
405.416 327.143 li
405.416 332.643 li
410.369 332.643 li
410.369 327.061 li
410.369 327.061 li
cp
f
191.363 328.697 mo
191.636 328.99 191.531 328.928 190.923 329.285 cv
190.503 329.537 189.727 329.83 189.244 329.83 cv
188.383 329.83 187.774 329.348 187.774 328.445 cv
187.774 327.584 188.593 327.061 189.411 326.641 cv
191.363 328.697 li
191.363 328.697 li
cp
195.099 332.643 mo
200.346 332.643 li
196.904 329.096 li
197.932 328.004 198.751 326.744 199.444 325.422 cv
195.456 325.422 li
195.204 325.906 194.889 326.324 194.47 326.682 cv
193.168 325.338 li
194.701 324.5 195.624 323.324 195.624 321.52 cv
195.624 319.084 193.378 317.531 190.587 317.531 cv
188.194 317.531 185.445 318.477 185.445 321.309 cv
185.445 322.484 185.97 323.324 186.746 324.143 cv
184.836 325.107 183.577 326.619 183.577 328.844 cv
183.577 331.762 186.137 333.041 188.908 333.041 cv
190.88 333.041 192.896 332.223 193.903 331.361 cv
195.099 332.643 li
195.099 332.643 li
cp
190.692 320.154 mo
191.174 320.154 191.783 320.365 191.993 320.826 cv
192.371 322.064 191.489 322.59 190.503 323.051 cv
189.789 322.568 189.223 322.043 189.223 321.289 cv
189.223 320.449 189.958 320.154 190.692 320.154 cv
190.692 320.154 li
cp
f
265.412 323.287 mo
265.014 319.406 262.432 317.117 257.814 317.117 cv
253.596 317.117 250.279 320.16 250.279 325.051 cv
250.279 329.963 253.303 333.025 258.297 333.025 cv
262.285 333.025 265.076 330.676 265.518 326.771 cv
260.752 326.771 li
260.564 328.221 259.809 329.332 258.213 329.332 cv
255.695 329.332 255.232 327.338 255.232 325.219 cv
255.232 322.301 256.281 320.813 258.023 320.813 cv
259.578 320.813 260.564 321.715 260.711 323.287 cv
265.412 323.287 li
265.412 323.287 li
cp
f
273.104 332.627 mo
273.104 326.771 li
277.783 326.771 li
277.783 332.627 li
282.736 332.627 li
282.736 317.516 li
277.783 317.516 li
277.783 322.617 li
273.104 322.617 li
273.104 317.516 li
268.15 317.516 li
268.15 332.627 li
273.104 332.627 li
273.104 332.627 li
cp
f
286.336 317.516 mo
291.289 317.516 li
291.289 332.627 li
286.336 332.627 li
286.336 317.516 li
286.336 317.516 li
cp
f
205.922 321.498 mo
210.372 321.498 li
210.372 332.643 li
215.324 332.643 li
215.324 321.498 li
219.774 321.498 li
219.774 317.531 li
205.922 317.531 li
205.922 321.498 li
205.922 321.498 li
cp
f
223.944 332.643 mo
224.511 330.648 li
229.443 330.648 li
230.031 332.643 li
234.963 332.643 li
229.549 317.531 li
224.511 317.531 li
219.096 332.643 li
223.944 332.643 li
223.944 332.643 li
cp
228.582 327.5 mo
225.455 327.5 li
226.987 322.086 li
228.582 327.5 li
228.582 327.5 li
cp
f
236.781 317.531 mo
241.734 317.531 li
241.734 332.643 li
236.781 332.643 li
236.781 317.531 li
236.781 317.531 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Toshiko Okumura) ()%%Title: (CWTCA_logo.eps)%%CreationDate: 10/29/10 11:22 AM%%Canvassize: 16383%AI9_DataStream%Gb!iCk?8hJ[c"fKhE_:4/9MHT"JGg_BO`_5Cb.ik(kJn:I#dZVH1kC7Wft"uX`3^a1ZSFN+g%oWC?;JG<@D[k?_?d.T's/Bs'Et)%DI-8,]W(4Bdnt.>_Tp'>AiHSXd5DsmVA3*42al>6qtB]^q:n("Zu;GiDPc0(GIjjNb2:3[rh+6A:E'%eAujJ]=+74#\:)R9b.HeY%rLqcC[l[BF?65P8&?'?q>H\R>]>N6uRq?:jY?No:okS=5ZjU_:ZhU*-]?dsgf=U0"1toUsI=fLFHsg=1pQK3m#D7eoW%c<8_8T`"%J,g>ac!Pp9hEQ+/SOW(ArVUe(FP1BC4>f0\:gJYP/6)c\B`.3qoBE+%kVWZ"\mjcDf91VP$()\qmAoOtX81qPq6*f6d-\_lYMK0!%ZTN]HAc.cS]p"6OJdJK4Td]i\:HlM$R[qpjLE;D6qK'4462Rh<>0UhhrHbMa0?+M3pn(gL;knEkm(kHd>H^$Xe\!,RJ-FSDr,$To%GM'aZ9CqsXqi""W@^o%XbWCOcT7B5VKcc>=f.?4(d.=F-FfNS[DAh3F<b1g+^kH9#XJ=(YrPS6,(n?#fh0HO%(XUb(%Y)k#Mb`2[%=8pMJKfSmRc"AbMTW$"ahi=EF%o0We:HsEOSf82j0NEaK'dN1_=LN_oSu[iW"2Lr&)Yord^[kZZHUq9Hr6ofdZn2,s?2Ud',ZNCc%YHHna?,rkSc;3bKXNe.($VOV<rj"(+AQ`-XZKcScVX%\/f>TKtr576kMksYp9Aqi-`);j-QE!ogAu1)T.MXL5YN+)Xh6O8.]oLG)%FfrV,k4/"e\4;"*2<AmbcP>p_9AuE1'2.;Sj@o@ec3QY>%*f,CES_<A>SlRVTD/e,KV-m0j,%![);usg)uh)rkCe7=2S";gL%E/W%/5r_s9WendS8lbTA1Z[efAr@kk]uMW2XVSU0%WX[i."i9kD,\^'!EG(R\0,-iEn-io91]K=Q-hN5Q&H,3'1Grr8`tb"@'.*c4<-b%'q%Z2YM;A9-trZO0'Pm/)39i`NhmS2&hc@g*^,ORa2S!tbAt;+K`$U:E-@C"EHYHRB?a4lIe\brR(dQhN"`@PT3);1QRbVLQFt,&%iuXT!,n3LNOjo+1B1cT9OF/5'Pk!%oA#sadN&M`e>S/tT*]o[N]lWLET:b^>*]\9g;_tU;j+^d:dm'^:TA-nOXrt:*k:DH;TD"\a%-/JIjLUDOKP+:sDZGa&`%QGYh8Z_;h6]P0,=8'i)E_TP6kTBe8WMk](R`8/$^\eUb(]O%+o"SGG1`><QjaX_`^\tqFcZ/`hj2eqT%nZQ3[-iRKP\$a2irP/7`=/].;irA+i[2T)=s7/CnqoA7If+(#j?2:u-`ID<FRSbf`H<%'Kk-dt>W0Z7ceZRHg?pn]5I]M2lbcUu8%FAnO@'NKdN0ri'f[`uRkVP[3b=J`<=<3[`u<d*sKQHU*=\)qEDpLr<M7QnP2.-8U6E-Wp1UTu^sc)!<9WdA:t=Vb1qZ5V.c]j<Q:%C_L%)9]?8c!ol(RW_GWj#*u>m>aF+fQs6gF%[Z98Tl3dDri>W(dC([Mj*tWb@KkK;GU0LKL8\b,\^<4s6SYjL8e'LiG%q;8Y%Z['%(GV@/W(>r+m%IbGSjIpB>Q[KRCSF,@W^Sf3$5bSg=bRoiFm,sMiui%=J(:i,/K1hX16fdXKc2?CWlc)d88#Tf<6N5q`u`E-)9/_G%38QFAY):pjr(aX'/p/QeZ):u$(ps]-M6qeX7.S:lg.35T9gEKM,PY=JbdT3*/;sheIT?AF*0MK#>Fg,gBWOfDa(j46cI@a`#=SAI%-XIJ%)Qm[Xi5;FX@)\6iYSA0)(#kG.Q#TjfERBXm2*hE$-d`q'M!O`5CQ8_V!uQ-iY/"7qWJ,e*N(7$/q34^m,D+Gl]!8nN=-:cq%4i0GE>PrC(rb.DIi6rITn1UY<Z$N:-osd3/"Kgs/JAf'*$*=G@XY/3<qK&I&!1J*]>O\H*<"N.rUjX23;f0IM/YB8c64)a^c'@<#%\@:f'a;luK=FD)fNU((kS2oN>-<m;79S_+>EJ_T8!j'UUTFk!b]LHoo,jQF)OrA?Idg*$=EXSfrL[*hs7o2A.KN=4:!7jW@.WUBG%#,Ff'0!Qs#\roC"rNmKlSr.#'3gWt.dGnE*S<[ln3Qu3&RR\fi;dA<YP&`iln^cEJEd!8jW^<0$]"u$V2[<BI7mJ;-I"c7*W38rY%(0kd7+^,Bea"Hm"a`;<*jLBd/=ItFsAQn0q0AEc[>Kkd`'BIk&@ZBFpN=0AmndWW>(Ga!m2$Ipi$DOU)a^g<tqJH!AlI!-o-'jc/%80,XBXuAjFaHEj<3g(j2VIRJud&kqFp+9pV!KYnZoa0Za:SM4DVos$>:=Pt*6Zo"B,-o_\FhlS-:Q%(iNgXDckpDJt2G*9Ce#c,;%e-a!,7.&i7kc3"F;WHFe17.feqB:\qeke7tgldu^5&/$0!@b"tV:ED&h9^+`1kE'?e:Gi-Sn(/O&CSL.bbN/aaE0r1X\,EiVI@tB%]E28rB.pNBIB]#<SH+G]C8cl_8[,^HjsVrj>'8A-I7!cD-*j>U3nKY_Nmn-<[q'9U"]S]FQ\IC1Nur.;4FN#16eNZ#33CD.:f6a!%NYZ<FPOYT(;>ZL$6@4^!$0fgJj8s4]`rPM;;D[;.WWCC&fG4SB,'CFFZn#W,H%7l6>+g>F.^'oDY@I$D*][_9/W3UrXP;0ToXI0X%[3O(VK2rN2*uO0C)s5-$M"3-9h"Y]D=+rMa=BSr'c2SFdOu-\%.eK[('3h-K?,f(;b8M47c9OT/r)Ion:A/3MiPq/]+S>ifCpjjb%$+W(uc8rnMS/&?"YpB<X4-`m(ecg38QL,fkq%AQsilKZ%ol@9b%9>#(b<l6`[E99ESbTN<24,uZ\*S>a(Hqu]N%(?!R&#g&#;,ii%f:/V$W%7WM0ntk2->Q2qG_CB@O1YajcB48dNmN`ZF)Z(.]Q,Q9E)]fkNKePt0>^=H^=m&LJQ<4DnZ=S/Dc<"2V8,\td'P%;U&!8=%i3-oX9J%`tBRi"NDbUhEMjCUW1r2.mKTrhTCTIPMmNei#[Vb)TS5YhV&h0,]f9l0G&p9?6M77W!T-oJ$>QZG"V%n]QLi"[$7qfb;%Ml^dN?]n)8HI'O;(9`M#FH?\`+^m5q8m&M39[>YZp)Mi6C5leM1B%(L9E%C4-F>>UEs%_`8eT()4H(-+1dU:^KZ:0.hd9`G15'cV%I\U4kSeM)=P.f#J+F5dg`C39<pV09@1"F[YaJopRP=1^X@pHoi=0*Id<1!+uWA_8,4RrJ?=SSh;e(0s:)/='rY,hG_J>h%apa9<`%q5`l^T.ZP[r^Vh^3n0H-%`T.I,H60<XDCtr./an#H2"Ko;u0l?TTQk)28iSE,5:G6k$0\f3=Mcrj:]q2#Kgc?(LF-NF8)rZI.,IL%*Mgp%(<'o+:PTMsBV'=%?e)NuBKmWAZ)jX*:!p7!4]%.GH+I@He=_q8j3N(:s8@5L[+=$jhZ08SBu@6QlnDJ95K;7e;,3Nh*C3t!%>RB^-?#f@$1W]ft+mJs3A1q`ZNsTTWq^*t.9+uEJ4"T?#[G([6OmC7k8$h%Z@NJ!FQZabUf#`Y:3YZX0PiWn>;]KLU90Otdk<'.'%8iS2NW".u6FZa[meLH>TKtUSong.eX?8]n=c8HbC.Z[)a'J5\icq[H<^6L0!LDobCc50u@JJ$KrT2H3r1K;eg0i!t4W;dQhV)!`t%X3Ba>NYY5+9p+!C;2^Yu&oStC.,,>TiV8r4H$%WJVWiB2rk'8IET+HQ1=c#1?!rVm64kY%V;E$f5>rcKn1Yii?uiCKs!]E`0c6,^%_q#m3Dr52&YKaXr39cU'JcG2=/S<=+KRd<cs,.LM]gVEuiJ5FoNbj3YOcS!YI,Ef7]Bf]OQW.J/Oc_XUK1m<Xs.jDQ[6i!RIYG!;%AK8Kss2;?5QA=dONF^l8XpjW/J3*6_rtRT6V;I;GogERn$*qt3+7l'3+,Y07(qIZWg;c&73g*;HCGK>?p`<pJq#3As@J+t2LVGaq%MDHZ`6Mj#/>Abi(3L4*#&S0klH0oPikW+m,IJ3)K'XG0'5*6#e2,SrpW?\o*$LKUr?4'n"F]k1gLDV71,A3aEKS'#`%V1V-<tMJ8%S-SpV,3%b^bmqcC"Er.$UJ[;i820n1_M/fVJd/ZA+61mn3BpX^7kEgtIC[cm`gIBE6[lXP;8bW_7IFA^#cqN,09P'UnHNeucFiM$%I3-s7Eo*V,bF8(>ckA"COVK6>'J2i'=UqVq>+.?`2!JA?j\-T9'u"26\!M=RZnl.F%XYH_;fcMA`gLWNJ&eZO>&QNDR^_G\a[hRA%B7a*[d@Qu_"-?@gj:\=&.e!-iA.22d$-^k-`<Zu&=g;m6j])rRp8CW*-'a`Q!>0b&fs-5OfK5aUKO^`2Phm&8O$V&4q4$[URGk7Z%@i+MaM(ur?N%IYO9I!p!FsIUIapT:][M$TkTI#S4duL9eg%6P>>j:>W3JFtbj`Ah,bF6MM"Y"jZ5"<:m^P+qs9WU?\\T4Ra0%S,<%f"@7^P*PgsOVET#9Q;Cb8lEL=*6H]u,CE)%omQ9:kKQ&QUObgK+sKG)mYD^\bAtUg0iFQVT3"_+d/4[S.E*)Dp5XC,*e-hDM)B6C%NZ2g'9"@ICV&R@?0;#dnp*@?8S&8eT1BEoBPGMTPnMP.#QV:YIB?E+$quZIBdk4kMr06hISY[Oi-/9;X43@gX/_S0S9d"cnXLF.$%3`8b120L6Xq=9na+R5,_]Z8Y4bcWF)W/Lu0f61g4%`c?s1+Bo)b?,DI>)SslhofDUKlpNWcq+\M^6I+u,AaWC_jX!YQ_:KN8sM1B%bhZLXZIj@,n?4?DO<p*O@GZu@A;#SGZ6r^UF),>_?ElV*.UWdLf1/F\TbZBK%o-9G7<mG#0/'.]iRd`J;bb7Uiq,0-VY#beIrO`1%R/sS-9"PF&<GFs/4`@f`j>>*oc]^ouTuf=#em\BW$2qm6I,8/hR$sq.Cu9Q4BL1IH(KrJJ%H7@^=Lg`R/9"?]'dk,"@q%rJSqW9"%kuK:Ub>J3NWCodK1<sat0?jf=^4Gg^9I8`u`lIf4s7Uetrs[fC^SeN-]u+i#iAJ+_rq^d_lN`2^j8h+aF_T7dM1,-GDHs_GIE26h%RT0*!N@tH\cNj4?d!#n55)O>[A1UI%O"9pT'd;nVaJ"^P<E&F3+QY/mhP.5QqtKWZT%$5U!7s:#XGZU<>J)%M4/+R,?qI`9W1>NK%/u,rKV1TYi\Dh0imXnZ236R$LM<jVT,lX)&3pu%W3Q56s:j]po6gsrTdXK%AKs!NJJ)"bIg@tNhqbBp^R_@;h51iZGY7KAaqV`<Q%gZK(2M0"+#HA+lDSbDBmmdlK_DSCMM^1l^oFYN@E5(@\GX*NH(aNk6Es6\n?U":hR*aTU[)lg@cSS"H86=p!Brsl2;D>n3mT)@j^%XZc\u[b<BcAj&]Fq(D]Xd<QVboPpr%h!!f*m^9_-n->OA!(VLm4tK'rNS`"Z<ic%DfCdkYTAfJ\2RpGa>KiGtjL71Rh4OL=m<6Zg%2Z1X3?%<6=jo63H*)hRSUM!%mInue([&7rBpQ+VD8gj?5&-'bR<uS3l_gSHQo(1fuY(N,)?;LK8(rH.HFOP+jFJ!r,$:'UjS_h8$%X*O9FgM9!L[>*?/naLo2KLeGM+)Uo>"d@m8-U/P'9kq$/ZVDfB]EZVr&<&p&\$D/L'4$'=).("kX_'Lng3[`;l^<4_=**u"+I!eJ%XkqZ`I-Im*eBBT/8gb-F0/+,<7*-P4'Tlnu#i@i.AA6T#:8W=dq=DAjj#qec"e^A,NVl*AnuIqg"6fR$*+icQhrRH]N8E^f-0Q-D%dK!]FrpU-;n[Qt]!o;<JNc/r0R<:KbDQYYMmeA\a]]F8[gDU9Kqp8RZD1-Ju!i%<3Wph71.r=?t#r"1M!@BWU`[VZ%=O1<?jDS-p%r:P#efP#C+o'c1&rPS>7PCDRc-bU"ib5$NO[@RE1JffI\X]M1:ALK5sF!hl1LbJW67)VOMHtaDn$pF"VI1]7Jj\D^.dKlG5]uD):%Cu><Cs3LcF1cc/,RhfUaG5hl$p`CTq"L7II06@$^Tlnt$5)V0.Z4.KN4kP%iH0sQMQKcff#]j/92Gi``cV/Lj1J]GViqYOZh.o8p%pMIc<JqHR<GP0:t0l-g&bM\G^DaA&_\$+Uoq^M+>s-_=DrCSEW&ZO^!rS5VIT2tj_Z$H))6]`9gs75&0:qFE1@;`j`^lX=.M1=1U%Jj]E2;Sg_ci#d`R@9@)3akcpcYQ$<dfPNe,r]d+UBHehkf?S5s?H)G!Y5`Ue/S_-i7c_U%UQmt2T?W/gT7]k2s)*.L_s1G5_pn41%-MF*XrTiFFp[]Ic/MX9>=c(b<W.S^TpE)>h^G3("#?'Bms)IZ*GK`0W3O[Z/P\Jp[HXMBk2h1JpV'uAR=nN<p5HSN`S,E;[ALFBj%-8bK_A-!j>C$MS2?[:8J2`eXAG,',F^Vq!#jjj9g[i1."oCB&ak%-@Ea(I(jgTS<g4bq!TMEZ.:pm*4>ZUo>>:iW?V"TaYAT\9:3%s4HQ/R[o66U52_(J#*b/0Ju4=OpA,*:n#Y1ANS=^es4TANa@&c0WXi.BRuIrS]5aFV#fn&q\M`kE0p#Wr)Y]7."!i^>`lh_#+"p/%VhS75\C9e&4+E^p:X+C`o!Q)b?K:1Ap!EU%/Y?\hb'IJJg)J3'2kKJF)u%VTEVi0WGE`/O9-Wr'EH`3BM5Ni;0f#Wo9=kuheS%)O%R^FH%mp7&m!h05mZg;pi?/Ehm?[HX._>:.^c+c)ARN5LrVq4te?UQa`K4/l[)oTmiAtocurR3E*k%4Hkaf@jZX[lc\?Yif-?S0h*%\j4fa043"])0u0h(Lj>/mc`MHjjI*Hc[Qkh'5u1fQNtdILY&F(\ROXqo_IG]Uk0;XEN:Tr[KT2G''\KgK9iH+5t_-3=7EZkn,h7Z%W6W//hX7)DDL.9Y8U]tjc-?]O<kJ<>,?OuB9C(QIRI:0aAh2R%FkVmSlD[C+TS'(&6n0^:R^YH<QCC@EnU)iaW#A*,R"4UM/FV.s%>:k]9ZY$*C;h_-4!eKENgRYt=>sD-G98Dn@kcl$ObNH<pMYt@J@C+ddD2XY?%'64i#O9XFG#Yo%McLFJp+a'j[P(Fd..^C%N01I^%6rHQrF6W'ej6cs4$$TBPPXe,R8Bc+NI9\P_W5;.PP+n3GUHm)UN_ct?J.!_LTtfrV+KUbL@0LYi`A/ZrM[t^tXu.&%",P8:cR%I6%.)"D#4Vm8cM<uBLMCgLd(U=hE[9k\UmJ%`,L=0n+L;e7ABeUp'G?F^LgB@6*_OoYgkRQ2>n_>YO[9bmYg-NR(hfQ>`HjF94p$eDH%%L<Mtatj_@XBJuQJ%l[ZS]FD8<Q(08O-WHfGM@QNdF%PS@iUs8E\&&k>O:-f\j`j*!N3Znd(`1P9FB3c2nA,+VkOn"[nhJqP<06g%D"iB:4"1GbknH.TSO+,hk)MA2"g*?OM5)sW(\"k!9.,u3L)T3Tboa`RGPR`Cq.^.NJPNt'NRmj['d^#@gW2pK$O$bJMb#Be[\t$Z%qUg8)Do-#MDm7b@5!eSCJT^C<mEU,7Fmu-LT7Bh"0@daQ[$n;&J`Zm,N1:6gZu5o@&1EgSII<u+'[$'`5*d6_/6/DilJgCeJ2/CP%#*c[c8;S6DA/8RH-&F5&ID(cLdc1L4X8/[H8el2%&#_loM``re)nnV.-q^+Y[)nJ/VPU$&D9*m@00G-HT8gHpVqFe,:G48iI+dS[%lA/ON)1>)N'C:BO);K\OD%A&A9pn$W\9f79G)oTuB4)M+YKs\G"9Oj+4?lK*bdXnS8e$s#+Ob`gSNe]t'_@rd2dgY`H6>>Rk"e/_%*FCDZs(LXA,1Y'>n^*03HQm%:G]#^d\45]'9j6<=<i\g#dU?M,4]nlACIs4HB"Cr<"-AAi7!X9AZIF016d2t72Zf-Hol?D0EF(Q,%7Qd/k&p_9ZD?h`/!<mm%0Nm"JaaahfU2d_[ciQngS7)>=Rq^nnh&.ZmLJcQUGKoQnrH"_ua:g-r$[X,lEK\no.i9DeUn4PjUO2UZ%HYT?I*%]6DZIju3^8:AodS@,nZ)$Q<hVa=JdoBkhK>'ug5ke+E#7/\KmEU38UGpRujRNN09!BIHKWW8;?s?!_9<f!uf7o7?!SkT8%RFoPebq+!Faa+I\DuGT_RHXMJ6_gOs[KY]HrW3N!nGFM"pJA+ii,mfu_ZQZ?2iUQkNT3Aif-'Sp.dW"J$tVLD1Nu[[TU9ui76*)o%;O1>RkS-N3IaYoj7&'MZ-F*QbP#U_1kD]r?`8d+5aT>RK0]MP"`4mr\>-7Eph8b9e@-HbfL;m[C0F'\q-4[5CX]lYqc0fAg)M,FF%%0q#s6O(BDMu(/9K*QhbQ^!g\-+4X#l$SAH.\8Kr1_2jT5.n7kjmXPQp+N1j`\r2m'`6n-U=b<MQ7F+@#XQleT2]uX*OFHflsZqf%lfND<C#eQWUm./TQBjFXp2p50)=KbjlJ@.(hD]cM<o<]%gT(6l[i]g+5-?cC5Eq(Kn#<b&p<i^s[@lui9s'ZB53<2N9C%Z-VA9ZV%\5UR8+5kQ@+2t4Uf@?(ajb*0ie;A:>.AaG1H0X7VW[rNO\m"h.#$6402NGMTlW]D;=C8/-0CMrUfA$"3?+KR!.Qc8,9!6P*XKUHE%QX:6[Dsk0lF_Bmnk@2.'`Ajo@Y.c=70D16!osOAEXh%WCT1(F0m"_F[b2PqTDr40U/l/FEn%5oVZ+`R%h+m-MpChYS]W79U':sqC%ZE@-pSS@!8O)L8p2_+KJj>YihWc[,agWo-5qY&DXRQ.EBos%Wa3noD\qs?'3\_Vkk(Y*K&=.QN"=!-E`h6t(dX1R8HZ(6?54l"?u%,2N*d=q>u7L%nF#:!ImnC7u<ul*5PG9P^\eI]'`.hedRTq-YMB;tK1"A+$',hl1U8Y1/`UK@iqslZZC40Pc/C3/j?-;ZHC"RaA#k%;`HriQ]jK/Y&)F33V>If\HKM"?J1k']d]Pn,5CG)_\/L]ccno*X2"&0m\j'W`LC%U9eV$[^M<3JZ.k!3<@qMqCBp+NkgX;?Oj^^_%ou'VMf$STcn'n7Gm^CO=p82epctWI0HChJ8fM9'?YBj*E4+OU0j[D7[Y4&7N]6!\8:0a]ffC*H_@=I8-CL!c0h6!gVSO,!g<Ll95%lb&5Ge@>:ReA(F!N1K3T^&,8-=?8O#lSM[>[[1>3'BX&SbVeiJNtQ%c<U+[5Nb>WG`BNpCW%W&@Ro9R=WVqu17-D."DdA/o0373[%SQ[E<O([6^mHUqtRd$/5AcK&J`c[_#FJj>3GO<G=%i0:,mIXeko8qVhk2UT\SC$N^Jo\0Nlr'`P@hAk4X^(8L24&ZpSXs))]M7bb%n7q.b<a;ONq2NRTE]/.0`$0GPJ*-FbroVL_mIY4%D'sLQ\m=$-;5^rkbZsn,ZPS$GU!o!TZYuJNQX`,U]Q(7pf."dOm.U:eh#!Ul%i%%1jHLtnp^=0upqd8O:GDi_sIdIk7:oC7!qWI]s]_(>KWRJG!rSdL_peHl.(HRoEDC*^[oKqBbI]Z]Y#^1Bg4s)9OghC90[iK(L%NR$kQ9*77]l=69XRC<R]?D"BO/+;>rFeWsU^A)\KFSb2R7Pr@/jl"L]::7Y*q42K&`D61,r=!k\icbaC#Q_2;S@Y/olHnd-[nd]E%[9`3BA%oAk617d`IPf*9IdO8O&#"4+FQr2<g3`#e\h3T5_GbTrhLG,)3j$.d47,.H/;R&&58;!kh)X:@]Qm#<l5QYuqp[(g_K29Y%m$]l"a4RB>LYtPoc1H;M__-&2oh"=Aq<%KpWM%"aJ%F`l9YNLB^Nq"!r3\9P:>*<al6SQ`>?;d"j-dETYQFLZWP[5&'q`K;R%9^Z%bHB0kpq2Z(VK[L'86$H"oXSHRIGHV&:VG<9l1H$=rJM\'HhYe7k0`AGLP2S=[sPaUB=dV/pQVkl_Z%uHq3pg.\j"nSJ"95W](b60%eNR2oIHhf$;5GViQ=DVWYKV<.\^LN-H?7fMXK<j4I5cXVH1uS?o$kS0rmp)lg!7K96LC?*l\bB".fSZu\c-A]6!oFtHMA(/nuqJ(%D(4H>q6)0Z>LF.U55fB&4>rc*V\`^$XcJGVXrE"uYD\_gFnaM%rd?-T@Ed3?\[FE0CtFk)eiZ0upSO"?n[3ip?[pB"g7=7P>58$S%mVI@;E$OdbVmCRF+]m#L5KqI6o4%`@D/8n0_q#Jbm1VgWo(>q*lK_\4p?Co;ebR2$];b8kZk$[9Hu3;3oCHG/YJ'q@nF"9epg-K^%Xh-[$^IWZ"45Z)LSnhrY\Rn.R@VToOXZEjprV1YQq<T'qQ.L5PVWKNJ?Lcc)qOa%PQ+^t;L!CcWY-u'qIY?+=Cf5b3c_Ua,Gn/WW%o2fsUa@lC"cKfYNoWWMF!#FF5%G[LP=Di;Z[CN^*(#eN'[Y$&SI7?`ss8IkGSX\;nO$UH$m+,:K9($f4rbWsd;l.3>*@5fBc%)/Q%XM;IB]+&n/nL^Tdm3sj%e*ZPJL"E;aejZ69B4pA9om.oGh/7oYr&*-+EAAJ$mt]/KJPP[j]UA:OKjNWE:(R;@,7$bRH\q4@\@>)t%FLlq)KX`em/bok_SUrd,^;EZCViAVid2LnC<YOXg(.hu5BTJZ1Tm,2YPc]l5>^,'n<`NE0>D'MbDdjk"?gfb84.9kQGX%n_o[2Al%L2rj:lc2=W>2Yo6C&.`+7YGoXp@A.0<kE_"e.:FdB`IH4@O,PKNo*%s#WP"M(*=Jf+FHQH+nR:Ejc;]V3dq1jEUL+V`ngF""Tr%I%YJ8<=I>ULRT_kk>cXsS8+#@4.Mif][M"\W/0!"9seuq+Md^]Zkm&dJC$@r_LN4utW!a1)ka)?FM,%A,iliMpC]Jg3%qESKq3>u@;%8)=ZS9C"P5:&ohG]PjD`_p:9?\R$)O5N8$j6$4E)M@?KV0XJ>a+,j!Uf2*t]WBan]`>6YoYChs4+!6,!H-H1Ee@kgjq;ht"):D%8%]Ge82rqbjuB:fY<Xl&]#TGR6UON.-0#bug[R#\97laM<5%!*9n=Xf?$,nkX.OFc28A19b*I\18L/>'(-N!1Z2XYseSG)!k]'&H8F%-'+&]Rr1:DF(r^QLn9OdkG[UD>ub3_*I+n$Mk40^i+dY?WO8qcD6F7/*eE'mDhLt'bE]K9UL*518@C23a(6sgg5!9YHI."Y@QTu.%(D<XCcbA5i+)5P!/]Oa'RMh(L2p=W\"&YMHlVi:65oL-UC>fWH.UJ'?/AHkg`./.?8=8+2[2>&\*ZKjt>\P5qhh5k>i%hEQ?i;=Y%Gk'kB&G'CSr_&E?rnnC5Ee'=>;AuSM0/GF#h\:$8-jI;4UU?kEf9kFpSUp7X\W/)K;>1DDXQ=J>R6SVnWR(*FEMH=M/LO^oi<@12%+U'<N*CCd*klWf*2G-3g95BZ0&LFX[:)KDm>MK#6^5noIo%&2I'c()<csG/sU[o+$&u^648X6\d7F*mGA&iZ`"N<4=Adm)Hh0)o#%#1QPR0]`'o3j6G*:[u(.K>3gH7i'CR1iQ"RFGd6na-4?8KDp>F,RnHdn:&q'9Jl!eOM-+69==R_.lbVGbJ&EG:K?YBP/h;'DQZi0%+'5V,[BW#H8(tI>HfEOW'$UqO8`-P;!62m=G"djK-/-]_'9Ok4B\M&5`Ced&h*G)@%<!9aA#2.LNi0?M5]Qu9g3>W$^QW>;k6cVA%G.ar]'D9;ai6(p;mHa)hh@P]&n)j>IA8e7$j$n:Q_db(+gBY5#[UgP([Z@&dL(P'\ZJP8.65%%D=Jdnk0/=*IP[]D'8.&lF8CY'f%#q(AX?4KC"aC%Rk`2]c<o4qhqT:EAI]b#DO%*A6Dg*H\8$uO<lHc'uf&Cf@o*T$0,`('l]J/^D;32BefW'QCk!'D/-YhZG<#mgU!%hj\'QrP\MKXF<-"7sQ^3d]5Og<lc!$#[-`7=J,;pqbs$o;#s$j"MtVL?d`GT8NusR?0-i&I?B(EF+[Pug<7XuM/JCDOq:dY(s%"0%MN%">]a07c*)kb0B(3A:8!i(&)*B?7Oqp[j4*``41l:pQ?\Ch>?,](F+K%1d8G9`8^Iq0?5"l#Pb\%B'T]D/86LXg$nd+36VtWfi%qtN0Q8;KiJS^@8c$o,?KJ1-sPli&fJ+smmReB;uIQl&@l]EYU('X%gAE^4Ms+q7sZ)NQ3q@8hJ*C.a8DT.=G+VSsITI[CubGL@Pm%nKdQp%C1XS\9lm:X$Jo8M[cKg=$KB/?hU3TE!/4/r@gZ9H,"CLBXGKn>0o'!.$m]nHP*)5OoTa[K3fbuDD];-#7GVOW\2,R7I8[E%konB=AU>u0l5&NK_WNjc<p(jpI$`-$@7g_I4SJaW#2`K+F7.ctbo3e&`_'D/KkW)$hMR:Aj3$Eiag'+B0klnR/Oeb)p@nj$'6YXV%(lc9X:@4"bJ^hhB1hIhkahtJAUtuLSq_=(aG6it%U7qNOd`<f^;3qo(PM0H<IH64$)*.2<@nk\L8`&K#1*Y".AOL+Fr6,o8r,YZ.%/]L>ge);TV;M50t@fd:Fq\\.kc>LJ=1mYf=,B[S;*@,Gp)rFPnJ;\A%4YH2q`_!NLGlMl1M&$o>TQ\>ABW%'IH_kng'=Z7FQ"KKl%7-'P)N,0Mg(@8/dkWt!4%c_C?caFNTR0*\=I5,c@/*k$,$tl`gcOq8_ls'%bS8gmHMnfiNAtcJ<KIlYBU6rW=)?07qPaR$FrAJ\M%YmhC0Ej1d&_@16.C<-iA)OQG!BC$iSe4QegfY@#AYao=M8MnP!G8$p[+esL#\o:fj0#H?3o/QGlLe+^uP:dj$j$O>mJ-,?'fO/P%%NFd)O'6Ra)Z[g'8Nk&+sKpo@.CU)4'LU:Nuf]R8@qbSe0(QP?250)@NENS:/"5Cqn%F]HnPVA*]")T#p(t"%^,^e:sKqapJZS*OD%8&ErOa6>ot<sB12q8Y0%D#kL*[mYEsKM(7HoS<Z3$Nhs&%$n&\aj=-:L<O&i6<!$>W'[Mc%:eb8OEDjP=seP`k8F(XD>+`H!TR\G%a3P&iIdh?gk`FelPUSTpHUSWI0h*a#,c[]ZG]KNf]'6(OBaH0=P5Y?;kZRa-<+]MjnAMf]+4GY5X@M+sd+%N_C'gub:qJ[==>)HB%&&_S9G]M6X5^4T;P!d9.;]A@`0e1.?b2HQt#X"e1BVL`":ha@s'^"sCZA8PW"p5qSO6J=mDO1*ZZhDo>cX/&e)7Mi<iiHD*A^KNG%PKBLkc_0UI(`G,a/j4iI^";dqkgD9Nd]s%3ae;ARTF5B?Nh/V)SjA\n9I>NI4bGAM/N@b\?$Z]\XtZ7`](?Cl3o)NA*4kc_Pl3Fi%*4kbN\mQ4iS/f-4$p%gX%F1XT+%T/P0RJY_[StMf-YEKtrZ5fF8Whli2k<5>\(>N[1ZV14XM-DbefMRDE$@,cU_iNB4Npt!j?:6;%\`Ard6fG"/bGP<8fj_s3Yb_aoPjf`$8n6%Sc]9X0_3oAtk>rYA0:@qDfut<rUu]b?!F`3s+n_bW@<?V4Uq(<Ik$g?detKE5_^/+g%E>4(O5NslC\(YBdk4n:VCbjCW;bK"(]i-ilPMO)'+bpF69)UM_`)n@u`GaL!]qg5$DBg/*#tmoV9Zk(ecnuj-L1!qd2?W:D+WCe2%_#g6OHRZU;;ig_70q"(?AQE=;4T1('_!0*thI5'GT_65Ke"KZ5735ge'ZRu'I6DI$4(++<6YD#RLJ.SSP.U+k"JX:eX<*qn`;[7t%0KQ7rQj7ff9/e5Qal?$DF[>/2G'D\t-]E[jY5FqmEba<SDrZ8_OA\d:\-P2*.esLc[re%hc^c(u#(D@j^?>-4%Eo6Ca#>\"-CG];%3P;)kPNU%aQG<$RS=)-+@puJp-H<1mGV)9k/9raVkXc,<2Cc_`JR?%<GL3=uhMp/t,<?D13s--5"fj#j/Q;6%U=(6b!FOb1Aj1ZA%q-sDKpGQV>3&.rpc<ajk2oXHCGXmFqFYWi,S0fp!/(SJBHE[<?-f?8;.Q?>op$[hbq`MtLDM*4a0KPB+(aER`LlB,r'aC?Vc#VK/%J)uO][ZbNNV"V3C;[hEC]7[Cu3FaHpf10HL4:`+6k]<#bV3IDk(F+'c1SWl0?mL(-L/c54[d`Xg6p1/)Za+@mRb_4d^nA!m.CtEN%-39NCQ\bhLA]?#+.?]aNl"i^UA5\/X&#[Cp1@2;8A-ST"c]Aj-18O-G4#YU_h+0q'T64KFpiKX_1)oN8o_>?6hIhYcG^Ff?gkMa$%j$[FpG7CKtF5p%J-6hKBm`:uS2LIn>-<njq4mE(,i*,ebUlLb52bZUd+jQ.))0F:j@r`(;`l^]kfhP+T^@ikAYC;iWHu;')Z2Cmd%M4DMD;`4Nl5SckBUMtRD$0omei_IdR20,!>['bVH&'794bKF4hUC.1Qa!+"iP-P5rjjafaQ8/)dl<`'5HKf]t^5bk2'HVWeKTbYa%?W%W7jD7?ZT]_`RaK]l<c)72T@RZV&pjUO\jMUM5QiUXcZ1HpDH2lOdq/Gl%TI69@2qA;cbkZ2[:8go9+-'n&fGlk!+"m8HTS_h6%8'QgISq`E_J!8-4Mg=b>2E'NA\.!9^Qp<i??sS@SqBh^C(ZUE"D!PISA^h1#8A81hSU`JfM2])V38(aaE[J*\Pf.7JIl`%)4URmA%-Qr`'PBJ]@o+!F^'60V!)3&9i;*3h#fQ/SAIWPE)pq[U11c6Bk4msqH5Eu[f[dl,+/Nj[n`.["75Ok.J'?Q%klK-#Ek[e7:adeP;%`tI(0G',N+3bcMN#CK<t%52$7nhslj-]JSAH*>`C(i1%*"dj8QGMR4"ant>mDpq<@ArVe(?SOA#D.pb_qVKeZ1L,gUYRi_>PYQ:u%!u\)1-]sO;om;9.WR0;Y1/b<):EUl^SMhjXOkQ0d=AEc\>=L*L1R?f)jGRSqX2r*(`4Aa^Au'$g%<TrCN^),c%$L20e6rk*i>Zo?%kEl(uE-6WF6=c!iM,^uQ3B#8a34-^1T'-JVEeIE%Uii)A.bn-GbKQr)_tfRmVSYdY6$1rYO/0Y37MR8A$C;GKbNPRLrlcPn,4A<&%8ULjeO;RDFn54Q!@U^ui_h9f`5#-V%@"nY:2AU`Rq%u$69fN!5iSc[2_V+.<@O]bA:<Lrfbjt(Xd04m=OPCfn;FZNL6q:b:K89MU%i*55Na]Y']F?uf&j77t2rDGjAfdug)p1p4;CY*?oWfLnt:t[>3s'2+/^-AT7/=h/lCO]]si7mr[Panf(c`cVXg>)OHQ#/hppBKX!%B/.MGLE"'7/54]iSOAn42KO%]*"62.;S^jb/!h&Da_p9u=_Dt8T:1pO8(VK'FDB(YV:o:?P2-=QfY-LjS`7'2M4NY&g@n1L=:='r%]1B6^Z)Imf%B"a(<RY9Pd:>2K+L@>t@:q-eACsW.)o]`jQ29@Lj+L1t5/)Vg=T+hUlunqclo&W*GIm`]k)8,2hgKm+UPFIk;PtU8%d!N9HQImY-Z!-P%*a[B"IURg*->p/:?!Jmk.]6@483,h!BM%=_ibCJ@MbC,<?HlQB0]rfgC5D^mdTh_tXe_Mu+*cj)C;BsTc%YX.%;)Q5lVei=qCQZ)@N-"5bqQ%R3c<MY+W\WKpC&0h#c[2589lb7JaMkklAZVB^L5a"B^%?.%Crge&TF?(+GkbNNl6UHQcLjoq'"PsV%-/AB`nZ;/o+Uu)"+>_G%*2O(W95X=uj0J8LHdMZ\j,U``]7=cqUj)TM\l%KA_e%<9q#PpYDGo/0EOg2]mtVc.Rk?<?(rJ":B%+`\%dZ'Cb35d^ui^s$0ZfrZIM<7i7.%;ilWI\sn)*46>cDf-eOb_&UMqb-9kfO3Ce&CFs7<V-IOA-N-B*l<hDA(WEENs]EH_"+o?-7Ms%-C@LDQV/,Y4$&47\i?N\X$>!J]!rnPheYE(2I5,7jU+ACV\uf)imodV1t5X\FT"oC]Mj'.Cq=03Eg#*t6XaflCqBVCn6KdmcDDNq%A&Dm,`HbRrM.b;V2*e_&'@!D4CEPS+Cq@.4P.iaA@qX90jjHT2fC?33imPla4!Ts1VMiWoMs?Z!Zg$J2&\9Q0,2%&U1:\`n9c'-h%QZ=2*p^Z6%I'l<O@,udAqZ/$5`WWQG#i9(Zk/`k`PZ_1oFYW.XlJdP_C0cd??X9[SOUY(gDmg)eWJ@<`T(m1-_]g$+<-s(G6=SMe%r1NnAPXuR"\m92%HAWXSTC1@VOADJ`:N6UgdNhKnSsifm2jDE!p5!2OStFkp<C4nal]fIq5`6pqF>lV5>5U7%iV-Sg1WbEejt9fR%][*fHSFr>_PYA5rM0,0B$(cT0=^6&-k(MU+!li5SDTQkB?'^<+qr+aU8W5'p>]c;Y=/h@+c(3(,)s/,Z@T5nU3*hu0S+BJF\U)qu%=J!LOlA&'TYChla_:2NKa3NdlfunIQ"6e2q3uX_^2rM9!_=Y8ccLXgSO`'+1hd!#e_rO0)=gQNf1"J`&OmOHLrh>XIjb>@MOo>)D%a%qPL0)j['8c(Z<Y#ZP$6A=W;W0>>oL,ta`BrI5SVkF;7Cd*<jb'X:H*uDrR$DCK5?O*/Q%+id<.PKj/;*3fY+LMiEh+=$OK26Yf%@tPG1;f6!(-J!LH-k:4Ah4(fo/Y2jBJCmu#2jB#_D"D.H>,IMB!Ss#sb$WE4#V%XcpR5PZTXD3>4[BO]kTrq*4Rp?Ge>G[%mO:*V%:$`'Oe<L]jfK<ps-8H"Iqq]:d(C^i!I!iOcXuTADInT<&]@GEVE;?"1pK7+%U3P0j7INefnfjY2K;9kM%(X96[b"tq,/`4)JXIr)%fl4#3mem"*pcIn5@`,o!mRFt#HC,Z>;QOlLj),KtO4C'5h39jKI59]E2j(bKUc\"!SlP-X^&.A`Z<T4HoF6!HmX&7-O'rL3i@aG#%c1-n<6k[,MEK+Mt21&eLA,:L:/o3.e@VoWO-8oCr_$LQ^5#*6*p?Hj,G5JN4\`.deNFp/C,6HSe5[l=R+qH`2qdP348U`<tn7YPS%SWJ\B9V7*_Di`l@Qgh0ApP"kL2EW'CXqeJ@/c!@@+Yt6.'%:tNibO7UfYB>@^5T:4DL5bs&fp`<Yn(=J\FMa\Qo[kQdrd%t]8uA]%@\RMd,UVtTiI8TH(d1M-bX38&S<7"!R`:T60WYsi,).97;CN+&,oI00MaYIEc<UjJj19C41\"0KZ1"dW2marEKFMmYZL6@!`hIZ6%NYk%$VIG1AUY%8Kk;NT_/u7>U3<"&]2dK=,RBiCh9=0W,2bZZGT$q^bII:*-p$7mQra_I#ZdS)SW!,rDqm9d=j9jEjonuVr0=B);%H,odR^9UbOX]2`$H[(M@j@(Pi67Y/\&RC:L_fkn)\r=gfb7u]km5!dt]+:s_5uJ'O__&R84\A>`1Oh"mhG(D11-(l/Q(7a'SZ^k8%&j'+YT=-r%FdaiM4`%qcZ"U&me#p5cE<DbdZc"o\eYR.+FqMFOc8bj7s#)%pDgFT%26HKH?&_Rq",mhDhn=FFgc60B_i*<Q(S9l&%>3=_+(5fptF8ssd4sbCKB#"05/ud<3>c7/L2s9\JGp7j*g>V.:6Dr+(kjlT(V]VkdJ4?+ReeA4ZD^#L/[;Y`ubIpV$-dGo=^9@5d%[:h*2F#fp@pT5:-;_i7h[FKKq;ehhI1JZ]$*Lg<n\'%3X0mhBpH@@D>2d]V'q[-M]#YB&/ddO8)iXCX-5n.rN-7Q2+jk,6H<aA`>%%p"BoYSeWVa)fWQBGm*gmUhd.l>T7o;A-d>Dk7q3.rEW>9lUY$'0W`J`&[,9T'A""2?s[?9U[^6Or<N;:MEZg3@tt"3DM[^^SICK%g>qerT8a;<X(&\ZoD2oVE*m4)-<E*ForXO&q_BH%9CIk0aBR\>\G?l]7f$/T^b--km:uRofXKQ;hV/<O*k,]DjEn"!N%@KFNn,QI%&mEK[baL1CctgJ;P##e'M2t(8NSJ47B\%!0H9Zi'=XD:Op,XWE3C>bc@kbEaG\2t['=(kM(IH\=o#n2q6?\$eZtj7:bn-QN"P\Rd%\e)8>&j>csm1eYA>U#Tb)gl9jk!ZLndJ"XUX#kE`eKEm('TJAFlHasJ>AGS"k9,C7*ZS)83MeH.!Q4Il2O-)hSu^pO^p2HDP\2_[%G.'.\@Q5l-o_qsPPqn:KS6_W4fYG[[LV_WYqgGbG;O\rOoLWN988P@\?+AcQo_E'_/AS>IJC,%d,:&(VE'<;e23OCFR!+uK#7ssd%oIRfAqBb5'##;+WO9M#C_pPqH2I[G0KN&RIbl2[f8LlXCNI$Pg;6p6i99PG?fU$*5LlQIme-l&m,@gg%%k/JKM<n=7Gku"eZ(?]a%P]*K>fg`]?077!TJ*KqG\>[:*0BF.#,MOIrj^TBXDDHH/]TeJ#&r4("DhLdZihCCU^Q^DEIcQ>kb*Vf#atYO1$UkeL;#A74_Ouoa%1Sk:'h!-hTG=1?&IM9iaRb56G`k0hU4LJj3dg2jgA+0(`Ns`ke=H.F+?\BmR\,)*\DQ)d4Id'_'6r/3OHi4RX8DNKsoPUU9n+Fjl%a^a5oQ[U\8&@i_F?G?o:>SFX!O#+>0_RZ7e)=q1LoVqN@?THiRId+?<NH>7nbe8Ji'8f#J3rH[?Z-/C2<q?pkoh.MhQLHNj0Qsb!%+!i6U"g#GCme'4SFL94IJU@@DDtP(?%9/2YqPCg8$)aGO^=P%+e<GH`hq7\n9d&U^qn7ICXjH?/i*O1j%@+_cm]l3Q92D(;a[dH:%?GH7E'mZiejE?9?n+H!2"rFr&:S(K'3B]gdl^'6JEY7+blFhYOq_XlN_-YRbp\L^.\.3/INde0=."A;d<klBC>`F!3?TJ8MNGRY3%l^,b0Vb"pn\CWB^GBer@pr7Q:8,,9^nadg]DtP&5Rj7o=^[s,;jO:QTh<UDFa`Gc)q"OW]hs*.gXL(:V1NJ2kh!:<@h]+dJ0^??#%l*pMKE?F'LLG[HIiu@l,3o6uf'=j0BTJ)kpm1'$gq@.K\?UVbiGHY@\Z:3tX5;-M[b^9:Nnqt-2Dj7?1iQ[l\)B86R^GIb0l8SM8%'=l_5&p^[5n+FkipH%`UIU4NBmm\Dd?GGIE>fGLa2gR6lGH5*7IcTFida1!MBt*r8]]Et.Hi4T<QnSX=[+L3/qP>9UlAI*NGctIP%HCQ\qA(bpp<p-f/jk0>(%HgfQHEU[HE:r&P2pU[(i4XU('TpQUj;i?G?b0\0m3I^;Y?uTBXKRc,]@S_7<kfJuCnuFVdYo<W@4#ut%?WJ+X]R0Uo.iH%N0/^@bLjT*KQ,A,'cHQ%ZV(2dZ.H+<=YtmOL)_"-d^!M8g,P#.iIF`ftZ/-"EG%haKOe'r3hM9Pq,BD"1rYXM*%GnXZaq57WAMZgA1+UFnNa:p$M)!m9S+Ms)AWVO_kf;Y%`gd+fpG@tK\rGJO.Fj!^ApRMhkQ,;f*rUYSC2Q`hDceVLr[5#/>FPOip%bLnPt;nK_sWH.rIC&6hY[5r[*H)=biHp65UC]8]aaVCn@rSQ6#j5'_5k2Z3RT6nfrf0-e#q0dF\^?keXq>'!CFh1j>GWi[q?C8LA%Xt21&\hJUS4WQ2hrUI2cA[Bu;SBT<%3r83mFM$3Y'pRCDD\p.ShjuF19*b(S^Ls24OnT70eP9aeolt6Alh8/Z[WU)'H@'FD.Wo<4%?)`>M>Z\@Hg5!iEdG`DHk@%ksoD3NVXuj+?G_6[%&t,'O^M?JXcJ^'%aV:Sb.CCu/]$n?B5D*3de;P,5@U1CsFM6G0I]8\.lYGUi%>Q5%$^.3-[lhAGEA@5CsjQGbYfZB]/BBsO%oASP(gg#-%YMY8EMf/sca0X(GelLc)AGc>\pQODj_gQT6/U>I3YY8-+'mou*0-H1L%H?Zs7]/%o^p^37E$(N)'[2a>+r)=!.chBaV'O+"I6H!*;r2KMG-]!NeHS,PVe(0K3kH3WSS#+tNFicLY8m=/iB+nYXml,`dIQB%K%=PjXU>]XbWm`p9oX*f=[ZU6P![P!k\bgs/%ZG-9_*l#rQ<L4)sp%b07?+'BCoj+^sH"`FA>b(!2mGi+d.@i]+B\,=ib=\c(HNeQi%/=qZ"_:kP9f@l;^`p%T-R[(1,Ar`B)V.:JPoFipefnQ-"9D"G)g@Xno!&ggI3G>\.9],KqGON8tY88hcPTSd@ml0.l:N^(#Hbk7c%/'m+d#E-D'Q,8OT!)F(0*hB<ThP4QL_>W'umsu*rYVNif;a*0GTUDh7qpPub[R>gj"YROfXa'.p=p_RBrN`FGX<^bsH)P,fdZ_7P%m;)Jqj0im?'tgt>/9-fA(DYiUnR3`:?Y4jkk4*nf%n/*mCK7U0%gp!.?G5/TU7\15gFnmC\LC/8U:sSf3-j$4l)/*=W\%>R*a1`B%AM;3CXJ9I2P<s->?21l(<]QWYP,(dlA.LKU]gfY0BXSUh1cLh7PsDZjBr:cFl1Ai5>!FkSbP'Q"H1o4c["U.\;hC/c0"(7KHbWeA%qu$9%:MAJ!leS=(_WPK[l*Ta$)VTk:REi5*QX,joTR(rqdPmi[C?nh4d+?HZ`:dAOTlDZuC%ir4@<*%5?T,1.01F#adB6^3`)GLX%f8lZnmgJ;"h0m\&1o>\NHhY^1A1Z9Vc?F4[2r7fR"Ec>3dQj,dg.NS3E'/F($QO(D6&M0rJR]Vei7km<S#,Pr#"bBNCZG1<<o?C6%lP6df3Uc;CJPoUC$%q#\:JtXn(-;=%ia]NTCH`7nYIaM9jA#A@S=hdjH+MRjDW$2?p*.\K`q5,(]5P%>:]2'0&$gqQ]?uB/!g^c-%LY8DICqjIgrSr"m1,]sOP3>M7V>%eIT=R/ZZ\4KO+Xg7D*laTAQFnAjKgG+C(tU8`n)j.RkMoTYqRNa]J$YUFq6Ot2m8UeaQLDUi%IG#fQN4O%VFTE<AJ1b%1lo7ZilLsJT"7(;`KS!`;#cW.QC$`&PeiXU7YfF4k7UteVd2)83kXt$7[?K=80Gi;X6Y7(\d(;I7\u;i6%q/g*LrCV\$)Z^FZ'Aj2F-=1VNItLJS]X!+]k)8psTL9)E[<@,i$NA[F/*f$T=c^"XEH)t7_JIi!:$B3UIM4*f`-5fuTJ?<]Bm*6U%GhTH#5D"OhTms8=L0P;:`pZ=sH^nEZ75d:A\-l`Zr?uND<Rj#_(,nH22TWHpUBDnCELYes&\0b:R#54plFh-[FF1;T/I\l7kogOY%)BW4;e,JP/FZH(/QYPN>#G'/k"ias\SuL37S(Wj(5e=sYoX,2Ra-A@P3osRo;b$NPNAUFoZ>=a)+&+.I`p%f.KM?kDoFd2Q&d_$a%OPl,\0q)@e.&_;b4;;&J^""/:?8%@%,XbtsYoH%r*")>_&+fAo"c\M:aBm;0=!.OT%@FlB,RI$*43L4&^U:</Tj[&!EVe99T`?WG%NtUI9J6u't6u3r.$7';gC(LQX7gDV-0IQ3A0lHCX6Tcfo2A)V$Zj,1FO)9KPB-(OkJ?8E4EBEl-*&5LC5@tl;^4iH!M',BM1_"<f%r*mXC+iN$;e)7<Y@E&kmk?[rIit,31<?fGg2_iWZ6O\1:o6.oESe'92&5Dp/"K?Du#rD&!A[mRJ'Z#p4q&iri2A$or'U:j^`\"+L%rJf@JBA(44+kf>7/k7($49mr)>t1:PWA5%r0UGb8kL695;a%\]hT,4-0"9aP+2,8-/,(nn@ge]</7hiiM39McA#W0Jcr_&EB,Y"D%Bl#Vd?V$N2P/bq>#gh3Pm(*b(Yn<mr6t9;,)G;#<#)t`&=2"GQ)UQ(Q_@8&N2=`/_=S/RJI12]:mN4llm)qGEYXT[fito$uV'i]B%,=_phii!c`gqMpSAk<,jf.IILl"/oRNOHbHfO@9t.q3,`lYGb,*Ok>lmD)lApYMmmp\4"?eoDbmEOn\`J_H]AMDANiZ*W/#>gJ>,%!o6*AF`ob6KI9F>V;,2d5?I$q-JV`95PGW7"Lt[!l0n$i?F8anZIA$J@[QKT!^4U>fJO,^@!un6YG4!f.r4]AA]9.lD1+G#O:QM-%rW@TBm<r,$3)TjlHkYuIgKn+VMLQ$-]NnYM4:(Sl]j!mF?3Ke;7FB!Vi::6YnDL'65P:#bWE5nVj%[;UCH=]]YW@IQOW']nA2.R&%^nG^2"`0mR;$i)-)*7OU$U7FdfgT5;dda1%`Q[h9gA9%*)%'D0#=WSM0D9h4I$_NoLP<4OXAhiPGAgONTBAu8mqTkG_#=H5dbEq,%q@934q_#Q*jLI$h4#-q+XXq,/5.Jm]I<2ReWOdGc2C8(8@0YnpUt&7E+S`@k\t5%8Z\IF5Z4S@YRj3f'/.;4Ik-QC)r8q6]Dt\Ak%E*[?6<>"f4q51:+]AWCJDAp+aG%XVb[#Dd>+0!3og7<hfk9X""nPYM,^8]t&DR?s6rH0c.rHP4F*dsO+Y;sJorSVmNk!Hm;T,8cW%WV"82DF1V-oZ.a.,YfI?Poc?F?7$;S8rlZnal,OjWW0Z'ZQ7(;RX)qqD"ps*ptBJ+N]I^F&'t(5gtQ)5]W8'1cZec&VqM!tr-,?u%^3tEE554WKq,7$aZFfFie`L`GY*l3>Kp^b7O%5K=Q&C/nE)/;)l$A86H`R"\h1".Iq7,"Sr_P5u"*$$C64<Y8)Xd'F@lCa%rqLAG%iUDae[J]Us*e"&cS6C5E4dfJ;33Q)Z-jLZ*NS%NWMBD%dNp^"VXJ[`?<kd2?p1I[AMsU>68m>Z7.5/FU^>I^e]Bdbf]?eHBqhoGp%lWej8k]Nr52+IMq^R)S$->luWKGM>R6$0sPI[s7dT7*cVi'3i0c*&t$EIRBHj6b>g=[.XD^\KdqnBb@2>'^*d277O1FA[`-,/Qlb%p,3rN-"!*r[RhCD:KPc(F))R36cXUoP0tk4KKZINN4IuRkfu<(D%_nlOEOkCqG3[%=O,3t<6mcY73o41U/s(bU-\'M2s(37nnro*%<BaMj$tqu_)Nt[iTpL9^7/8&LeVet`?XLQbap7eE<?,EgdUBt`[l9Y*MDNoZG264XhZ/5*+DJ:YV1dVf;GcL,$-fl+Wf\J5b3S*1%''VG#YE*m/r1O)UU0s8Hr?<c1\[D#]r;<Ld85S:*%Y('kZbS6?CrU,rZc**Y`O&8g\J/$1(IppA$dnn,k-p$dQ(M+UBWL7=3!#2<%V8XHRDCg*Qb2;3npfNDh039"(`D\(uQ)ADuQ1F1/\)/]#mCekWVt0Fleu2f>Mr0&JH.V9Rr5%,Kdlm9u*aITlrT/RhA;fF/A!(nG%mAdb5h\ssVX@E<Q-_r3\Q"O<.oGrnD?N;OggSJgtBlEE6<g%8u4e<G:<*!GX*"(o35hkCGrY@2a*ZJ9J4/*>M/'`K/)?F2UbkbS4%#op8WL]=&bTHu%!<n#"r8/N$t;)&0iEuq1BH^(#?-u4"'Q5;GC`JBr8W0h"N#PlNb#,b)pfpP:NnL#ua:uaL'aqq!RNHqAMRn(S>%h36;ViR1s1N<]-?0Y!2$49Z2^M`1$ACNGtD?cD<*KNTYbJek9VE8E,9\bCm@eKrp`!FrY5548%b&BNh%eF2B!+.N\m!UTENKFtj(%VR[];Sku<-V^fu'YN0K]OD2G4.-AbqT$lIoK,`6C^FdmWUalrl]c!QPE`Ekp!<tR%fK)8RSCTe17IUe(i97:*/+0%?$(]/r'/H$Z%G%mg(j_8Y"jt,TWTsR5O6El=.LK^L1V98-o/[-HWmp>4?rM\uFoo3h!+4X\Vlpp.Eh<B7!i&@>dVp/,8M=^?!ZId%4I,KMfOY339%T_5?k]j9%C]Y.8Fa44``6*MoCasJP#`NpaU^NQf'dYj7kY'V>9H_Jk2I,&,0XZ%E."XW$t]r(TE+h7(32.8.o2X]W"JoZPr)^4M`%bKoDl+mI`(j>+\D8[HDeQ3&JEm-$A@"ggE?:lm1Y<5..9P=R+)KTJGPoh+*Q>FZ.q@&*;)*S_$kYBC0T[,j)W="neNBUH#Pliop.%_hM:IT&@J5!/n@H-asi.Um0TO6DTGH%7DkX=WG/4E!&aQr'9S2Pp7'17i[0]OuRGGcPY+Z-F,L#r[cMHNACc6;GtL\.Q+m?YsFu4%`:?5!mS;g0ji(J5ga:%-0[%WG9k:)VAL8jWZ,@tU@u*$?bcmVEBhgFoDqc8$(lP>s!M?.fA"toTAjE3=)8uF"-8aD/2<2#EGC"V>%&h6sdoZQ3q&BBn`/\H*sR:n-g<i%?F-W`iU@V&4o0,4RG2B'W&1)#I6@sq'"j%^gAF`N2`VP+GV#'n]Ce:^#QgNJO`"*!R?%%VN>%%lL"KV2haAZXQ8EE(hT>L58=M`[*+:(e50d)EDXlZn03kgh@j;,ATnP\r;T!gcf]W2nL&Z-9!H&(n84jk],r\+3*GLU;sMdI2H2.%qSL:X-[cgNO5KUPa.Dp3Cm)nga0@"?(gFp1,KI'q*QFDZFPNk[n2]j:a1F.:(jcBI=7?`/s6#DMj2#MV#l?i1"IiHl95mr`b7SQ-%hp)e:ntT3qs'WL^O&f-+`IB:Bj[Z@B^\ilH<D-Z*MWIs[GZFKfYNOd)$Fkq7?$j9nDBS$J"b<+"H`o))^qAN=hEO-k2uY]s3Ao._%.I\F.g2:6IS@iI&nA@ZXr_7:%b3%6.r'!(af;3Mc=+.UG4g^h#S\Ou#"J$Y$TC,bOX*H=E%;"GZk@$3i23`hc$b0tp%3rO2.JYas%J,ZY,CMrYW^)c=R#`>(=J'9?N3)JZhr-/`ZIKAY>Gp@g#^\k+mn"BUSa.-a'7FO*\]O=r3gGRgb;bhD)U92"1hQW!6VX$]X=.Q'q%krM)bU8lpN?ItaBAt)9HE7CUr.;&Q;V],t*<4S5$D<cjZe/T,@ZEYPh+Bm1?TbkU)MhZ(O<"2GKW^\\k<#fT,/Qsh;"DB^fAJcnV%a)VV0.qs1S:_`-Nf&7"PFO_l+MIQZT`@kt4=3RD=!5NW4\mm^%:!nj$@mL&09Z/Y:.&7P_`<$1p8eJ#E+Gcn))%!hWPe[DQ4]"al%NM:.AU30+_j`^<kWbX;:bCJgr3&f*%iLpWH\+HD3]2/k/03oQpV%l]>VPaG!*K=6#MlNbd<"DI[3[WBU9k[K.S3!g,&@2YK;tKr\%G8mlYXk\u-$<8Vnf9(dibP.6"D6'V7[Z`WM-*$4`H.@I7Fu:+lC,!@Y"`ULD5_CfG%S]L!MQl/lG7>mufJ%]lKe?Yh+FkM`W%^#e%IVV1n:eLual)p%@lU=6"JQ*Y7BW3[^^pXEfbcA782G@7tm%OZ)`d3/Pa)l=Z%L`tN=TrVW)UJOPCqs/eIr`"Q'1OeqNWo'J6OtN,%1T\_t%Z//H?sRjh^8Nqceo7;f=Do$5?sL0K'G_)_VufEmo`,NLK<?&A2-2:X[\D51$k4nc.<a+h!&LWm(MsQD5XV9nWLaGfYoWV>%\Nk['Q%Fdk%5ZG+57LgPgnNd0+6h.Jc%n&^3>Ef@(mG3J#np3Zj@.=eMOL[K$=S=dS5<'[R6+Ed!q*F#(kQ()&cqES&\qjj.M.c&%Uh'Q[3A)q\(agL57K=,&/?M!%Ot\g+/V!t+!>A';+kk#'aEbSpaS-0>"\5Q.<&A,b"";jR/;.G[O;G.FRdL_fBf5aRjYg_MGQIK3%UOoR5dSa)<3ESN_7L1M]!#Yi:"51MBBL&\F+?1K;=<]9t=9e#B@L*g43j8Y`0P;EG%'0``!K'hs+BKRCc-cWr.,%W*k[2@j+K]'8%BH:bk#PJBd!QKk,7%"61]<*4QTTh2PA,nlm@1_up,T%Z(ncf@b(TH1D?nNQ<o7lK2-c!#,Wf?@`O@7Jq"m$55*tU3Y6Vajk(ab,#%?uZg,/:i3TLa6)&;9sjq#B;nu-O<`,JgjONL_c)i79?Bq)F1k\MIIES@K9UL5V3mn0an`XC%1tQfAJQ!?#[1e:JjE/M?+XFBr8\)%/dr7IN"-K;1@cdU'p'q2Mh!8^A[Z:i3#30@d007HlNsj#Le9$I5fEj6Q8_*U>F*QD`)8icR#[@0P=#BU(4lUd?D%EX"4RZKn>h)d%"1E@Q@\UMU&R?<4.Krr17/`nmiL=;)ThcKO!>&Wt(RNYUZ;<B@![^H\$\\crSYZ@d!9Fr$$[<7VJMMii!!NJ?V!2)+2lIck`-$3S%W@1ULU>fXT`)=,anZm^t%V.@q")`9YUH(k$^t$fH"hKltM?16;@$s96+S!<6:`;\Y=B1`Y6(DNhdD9'Y:cLl8`;)ZXVM7,BQ4d^>%M0]9e7(qidX$Q0*<jG_WJ;?#f@bWqb&'.VrQ)N#OUfh5;+?+&+Qjr5QTc!'iM;*J7+cZdn7Y9EGFX6AVNX)\^_Iu&..f]Y8C-pM\%EZLst=BM4G/2Sj#3"Ul[`H2CHN?\oKW7hdZ5n*nW)#dWV()D@A_W15q?rI%]&e$bIF<Ycn5)@EW75a(nTt1NYJTW0uJ:t!,=C?;;%Xg[YN@1LIuS.H6b8hc?1@-3-cH1R#J"m42Cqn[G)MAt.K)am2I!;-2R"'o/"HO4O[(Srm+K<'T;dnLR:3WfM8%a8dj=:MWs@Ua%V%&R\=`^d'J"r\oUu)VApW.9J>g>6':F^qeDbnejD6%B.mO6FJ"[O>!7='I5Nb&]C4YR8Hd#+c:,MfY!3P.7addKJrK4c%A1AJ=/j;%`75,>@/g5u)(+Yl'KRZ-9[phU8C8p_6TbmJ<$gX;UW'#H?jhOJ":uCn807+1U`5\m)@_<i"$6W'i:unu[a97Q<Q(79Ri7q0H?O^a%TkMeMgj$=0ec\?0;]R\cTGn!o3t-r,23,hrjTj39beq*+EM=>*"4S4NfO2%cY]aF2!4lFBULAn,_2^7D/Y'4aYl=^(%'j7!;P5+?%kTD-Zd^ZNk/1TQl'I4N3->I1W^\fCQQ:u!5c!QP\U`_qB)e:og%U]b"!b#qM[+99G0HFUbkQ0<O[00$ITKst.KLc:`g3eEB6V#9$%aU$+Z8$p0iTq2S3Z=jY;2l;LsL:Jc<@M4W+?>#LgBKc8:V[$%q'21os)qT`iV?=8(r;7im%al'r%gZ%:9g_G.L3t1%UJsX@!NO;Y%V$D@o"q:10cJO(g69ZXUC]`pl%alY\:nVZ51fJIKD5:n4F-qc3&FhS)^lo,]Jtj[Z/AO,>$udp0`3jR$a<ilfEZAbD^o;@qLt(+f%7Q/UahgsoKOLpUCfn]X'!)-";W5_dn11s98IUET$1I<X%!`2<rKqeC]1N<s:U)s(V-ieCc:38a@!,SB]r=+Jrg\^'++b[56J\EG3%-pYRmcr'K\6)%A2,g,82L'G1_SZ1rg!%WYj$N5SF<.oh6Gn]=0rW;X53=.#LqeZ5r+O"(,#AM&dOkHUa-oJhEchB*8hjB,W2$>b!%X8eR)DCpboA1Jo[8L];e#9!^8!FeE/"[-o/Pc^YlB-D"pZ?-LF+q"X/8dnE8#H%GYLT"Sf"IR::6lCU5To"]&Ea,Q"!.Y.O%&+C?%UX2J[e8[`]6;n@TS2`(lA9IP=D;hsc=)J\8,#qd#_02skX@L^g5U%n4Sk('"Dh'BuAq^=36jFgEaON+&qT4Q5k^eS.%XABu`.0#(%F_?iEKc8RY^]Z3[UTtEJ,"Dmu8o`7`KoT/k3^fi4'*\>-a/50L2mdQ[+Q=p[eLn/7@hNC(OURKY#,i/VhA'(]3'gi;$KPhLW)Q`>%<j=5Y-$D_m&E`J5Jft_n+`\7m<oc4W-k"BL0p/tSnhuX21*Cl3B[Ds1`HmD\E.Ql=\<2gbbhkSs64uYnl_(qMJHBd>0R/+a82;5<%#9jn+d)kN<iW3>9e6iXh9MuWq(2QCNJbm/?L`f9JTu3S8*2>fAlP;.SWN%AE%9>Q()T#hrLC.QX.agSaiLj.>`tenk@ZUh2:)j>N%%,a!N.5V-#_D-;k^kq!p!r5_m(rC<5=jbfEK^20f$_;ha73S];H"4W7f@G1!-Mkdf9G>F(C)@C>MemQ*PQh3qkZK5.f/-ZU&G!][%!p*(K'U>U'Vuq^a#s:KH&0"(]GX*WRR#H,1dK7K[N2?/"bhnf,@Z)]I)5KM&bne6WK!#<Z-S-Ju+B3D%PS=HS+WMb^&s169R0rMN%OI[/CO$"=TQ@e7OC\$Ck#T3M+is3gdQ&%su01/6dm\9Q`:j-809>q'c,rJP$T[a1JUJC>$n7BsQ_>#)V3)GY"(jge`Zd?J*-$-m/%'@rIZC*mWr$6Q"-#&IiFV9j8#W"(P?K!(;/p)Wo0RW#F'@Aomfeu:61,S7D]MP^Fm))-9A0b(!/*%5S4THtMK#6?ZSmR/pmZp^G3%U70RFP!*P<!.cNAYtYC]5mIKR+RMEcUQUjD`H'<\8d+&Yb9?,R@fuhm7G%^h#[5QGKYj`ca/(HtR;lO^QE<Ei2Q_a'<Y[0OBe(a<%/IXtMa=#A)G*sNO)b%gt(^G.p$;Z4dgqs_M'Yl#r634VD3slnUE".^"JO;d\KpH!R/IgbsSNn#bcn(0@0,W#9hWOM2.9aUTo]R:>%<E<F>.PW`0J99-K%<RC]'CA-Q&=lK8,9CC%L_9P.O\Vd18&8kABb\J%0rZ`!6*66.lELc##eIL`^DI54H'L5FqZ<3kLZ\pY00':d%<>8b!Z+^E]VZTPM5Su2mGlpPSY"G\t"ga,Q'b[B=OVT2Y'&"hHl.d^!+0@&=E@+lN?jUg<#_qKQ5lXBr(:u-a1?p%h)NkPZA)r@,%UlfSL&-FIQ(T\8a,p!Ig9enb55o@U^TL\Xi5g\1p4P0im*s`)CCG[eS"a?&LM5j<@C,RK9%n<931-2456?N\%bRo4k,BXAD6.]A1%L*H=89H/[%LFq2;Q:b<#-kmS;fK*+AUl@3`/RF[mMM]al9Lp-ER_(6Wd[MAhg$SkX7;-Xs'aFsN`W/O;deLC*b[U4B0Fm+VJrVaO%`be;(+SBhaM(uf(*ab!Ad*6N_i'8eYiS^GFTj3<iO\@T^W(i3OZ&];_XW85_W\R^L`K6,pia.aO6D-bE?9&9Fh7uFr/ID%R28^3Z%@\Yl620Ca-!i<h_E63214nIS`>std3V"?U#]KEY,G@+b'BW2"+fb>5(c9kLXa:f[$!-`c`%E!"T@;T5DSfQdkTMq_\AG<T!Z5NB&%ZC?R7Ls\>\0lWir13`dZW)5ed6@I&?-k0^iM702"rdSXZ%f5l"m_R-n<CCrM:A!NXSi$=34%CQ`:jQiQ_`LAg-"IgL.eY`nd=?3+%X3(29Tl>dfQlKN=o>JlIU[N+08eKgf&Z+])mJo?'i.3,I1%%;8+>fijV4_/G:n/`;CDu4<PRQq0J]A2"B44=4-=GjnHtp^X"PZ6/%K;E)2(<8jKS=`IJ&AYMu6h5nDlOOjEMIF+bZkRH.ciDG>%[Nmb)`.Io/1g-[WAkt5)%!&k/o?rKBJ<Oj\2qVO?qe!pY)U^-g-8C@%B\g[&#ad`A^<iI(Wg52\&5F.#,-7bPO9+`rONt@[A7,C4UV0;&MaL\qap+3A7:C2k]F*lb&3L4a=<VJf%;?2EC^\/1J-6U7!68,>%hlVF+0_W=8"&1.(]t\t/VPV>sLh<t=#MkDpU5!Xt*B=HK\ctUK0U..^YCU!ikjLXl*]OIM9;P%rTF7Dc-VN>aNPkX@Zpb*?*![Cm%(A;Iqm(NW7LojU?:W7jkK<CDp0aQtTa%nd]3!Sm(#WH-K.Yr)jrQrom7eZrV&/f+G7N*`hdR:VBMAr"oh2D[bd$CQ(^PpoKL<ZNj%+h]?rUo<HMS*X,`PL+1VHA-%-j5qbI'U4$QRfQ67"C[2.J2_1ge^\r_cQhloD+Rhh*+VPQ3m$D!BG92HpcfbPf4fTO@QiG[C4B_o%ZHk$dhD>u<7bP1t,4"!'E+d?Z6]a_Q&3(N1.eO%4&=VYuDF:s#H:%lp<T3V$OO3TIc2[2"O_>5K3)%8DK7QT$7q%?SED\g6Z7G^s%$dPHP:8TDY8T>gfWCb)@=oiBG1%:#]g.7;>-2/Otc^%4?-6TcPUM.W`88-A"Gi7Rk&>OS41fQ_Os!t;5d0]SkO@+3p[Co$^X%>B]%(a:jH+4TjIW'M.*jEhVO5^pZhcqS&9dItDL8mhe!U/9Jr:s/t:h>&qg@"H/7^hs3e&k>b`#!6X!U\eX0>_)Q:d9DUUPW/lH4:O5U%;7&Du^7ss@_r$+%Z9CT6cS'u)"%jplm\j;#!`\Q%*7+:d(tM4>Z-hR?Ct]LLEJd+,bKbaqOtTCXTg1%D3RU*o*I.WE5Hsu`<a?o.%Nr"Skisfq]!FXi9]#7*0^7'\dDOSPY/d7X`ia0Z\LiXVp'7_5o_2V3[("rQe#Tb5;jnTGgF#^6qC=L3Oj$kqE<Y3Pu6Eu(!co't_%5UgX00"WR6Idq*1>ghAoAT#K(JFb2uM493DSd&ct;ZPr)$uL?37q,o40#GP8U0&6^&-7qo@mDI/9Ue][Ij?a&YH$__SDAu)q;^\2%CHUqg)5;4"5W8C*5m04e&K%bX$I2Z&N.V9\gB[R@m\>dD5M.L=e=%/iP6VHe!&[(+47P"/kAqIKdkD2c*(SE0(*2XKOpohD99B^,%`PVPH5ZQ_n,8PrsN\b2_(`G#HK]W^h1t>^T%s%%d808sM*sPD0gKQ6A%p&?+(n.]JOfT^LFQ-^GO`J]ch)LeFi=cfL^nWKd0RmuO%.<Ird."L<kfuCo004;=g@%--^7Za2iZ;'Mt5]D"<Yr56D+eXC?I's\t*+N%acO,n'Q^daba9=.g++i<_,`Vs\*@)57OdKS_#a+G'%)]==%29"*.O=CVuX;VWO5-78kUhH5&_0S$.g]U6#/S(>%N+iA!+`oVtg/^1^$c\!4P3CHK91Of[\C5-;!<J!Y;G7E(CtsIb*."h)%_&-%JD30Z8lpn-%1_Ph3FeZ(KE#D=WFgG-VO!W1c2kH$akcC8,f](iJD(Yf%XFp\`>p`27bC"i`+a]e6J^E-Y,6]2NZ3Cf%2EX)-%UXu1kB"o$LeQDKX'PG>t229!X.7cn?RY2`VJ"/KPqH1\OR-6N0kmGFr[!EZY^TCTT:c^L.-^+TE^k2g#SIAt/:Or8rDN!>1GaQhE%IbcuNcgA/C_H<2Om]cCG``M1c!H.@qD*7.i*NGeh:]Y-YqZFbJINP^P!J%MQ'>sqV66ZiEpc(jLWli`2+NUn)r6`&!ne$E"E?'bb%a6%5BL=s.MKOG]Y26:b&&JP\k<)*#N%0bcQ3dTmRONEN"?sX*`4Vr]=0Gb)u%"il(ST_)-;>$gebRt.En?;n`Q1_X+:McJAOOY!F%\8=qQ.SpD@4,'IX0G>q[!6!fd@B:hbr_PIX129#Z2fr%,i<E[.+(dbDi*Z(m=)XbGJP/*!bg3SVl>fuJ)kqC<!Jos"lS6U*Q%u@V%OMkfp$uc^u1Mq^HoGb[2N1Hm).#a"0iL]<9_Vo"h!<n70;\CU0+]WhG6GN=-?bZbP6GHAOf?es=jo_E&o-$H2@0D0W`-?$TL+&g@%6Fe75O_>Q-n8PU@qT96j'\X$F2[is<8LI<E+bXF=:i6Q3,P2$(L/T=@4J:LA`kke*2aeV^$QdQ%KSG_#J?fWD\).$\L<9;/;f4e;%=)J&+:i86h@K5)2e58Inp#a/fIe3(R2&D9O-&^@+D[<[_Ac,FY+3O'e*'t'4=+^hi@>&Gm_;Q#jh'Ve67IMfYW8@Bm[hT8Q68pba%rt\LN50Wc/B_t3*[<Pe=<+:.U2BE7t3ROlG"7glB^dqpBIT>1JF$fkm%gn8jDm&Ua^ku\<'u=T^nk+ukGV)F=4?UdH,:aqt$U[oT%*V/eoiIMDm4D60hI>BP%4d\G[gCt]X$n*6DI@-832C?AP7R3nu,7TH8N!3.;JmV./\>_--I>BP&4d\GbM5u(r5k+K"IUGoL-uqcR%NN-IXc329_P/'in__"473WW.oe5[]tL*d.H`h53p;KP$r/0W(q%\8Ab#W%0p&L.G2VQbBg4psVl5,#h&$(/\%MRY*>+\RbiXG.'*%b6@qn+#OG6A?t/[&.JK#]8AZY#]W7#LUP-pRS"/>L=$4'$:YB4?_Vn3BW=ZPR8b8[olT%/ojBA'3JO:5CLV8;jN&/_5o%s#5o`X7%_/'3@S;%d6M$GpRT!>Fs*YLfT20?>TD.nHt9o"1:lkUnbp^i'@)GHP*^c9XDlikupfdX5S%Rp_@_L'Z`XJ_fS+f)dT1l;iQ</A5@%&;68kf4,Z_%FjZr"[a)g$&nHf6l.o+EL7FOL)FD&6^%`uWi:(/OAn2+.0%MD?p4/YFKT9:))T:0@bIIi.Q)m09]Wu7=fRF'!OK^n%3J0j/E\n@7L:0qKkV$s!!b`r%pB3lZ$^&/X98`TL.#9utYXDmK#:OsDoJRKgnYku^\#qE<%Y]TZ[*R"I(e/c_j;s"_V?576N>n``%&G!dA&5T0X@(>GpZZD5H9K]s>=O2U2BlZ'Ak&IhCaCM=t"OTmpg`,[GC<V]mN=lah(V1Q:W0fsuAh7A4p=)GM7P5Z4n/GkkQ4q1h%qYI]l9E7[-_un-FrMjn%g<9;R;aX<uF<+1$>Y7GB_n@-k5lUBbPn/e0H9)7S%$`9_T<4eVO^s.+W.Ir(']+WXoEF(0DEi#Z"s=DJ%3g/;2bU2A3A2].bF`@CC!3n9YLT>\SM\"\f`79sea8gA=0SE1CE]jr1U!?+54[]RpZOp[)<kemuHE*q__,>M!&05[p39(:l.*57$%.>kU1VgrV@K$d_?Pqj@6p4:5T:A?\,9+W7gkR[!IGZ[3YFHZ#a&DSO!#T]EF60J`lW$c#$ll@5Z[A8P+JF=qC3<0`YKNju=>B#Vs%gN4mh.f^`rLSeGm6%I@Dk:F,C,X6g@Z-PT'6nqi$O04=[%Ps,;'$%r'87jL"V[Pmk8*J"obX!9&$H$,C,u>rPY[@Hg"d9JdKU2gE%;S\]jBW"_)V65OrNp9/'HS?8^!$VPV[n7j#$mC41^)CjB+U`<RE:#ZdbAd[Q$k,F3c3Gf0&B"^t5h;,Q$QU"tFZS,eWaQ1pO)dAo%7eR"nKH'5&dM86ATTdM$#T_.,H3VFV#\4m=A-'Qej_[o=+oiPb"CRXmPEd@9\0P`\;`I2k![%X@h&s\4i$M;,6<;fW/d.rF!/,kc%WY'oEAq_@L8s8KHR*Gmg6A4g*o:bUaK^t'j4j@O)BJG!PHuPDpUitgB*1ijC'h_5&."@eeTZ&UO>TgB^8.oC[)r]CV0+]9f*m$^(%Ar;m&1BJ^\]'0LJ9JR0<,"l]W*&t/2R0Q8:9]JATk\I>5OF4lB)R1qh5bT/4!TA@5C?iW5L61X8V@)gEl]rBMkt%Q,D:q/l0R7Kg%eQ8h#7$CZ*#IE&RCB\-)#;D8I'iSUDM3;l\&<R47o^'CB/AVmg2kN&?*"R8O\g#)39NN9fiGGTW+b^03ClP3#Pbj:/!S`1]2q?J*%Jk_T%=,TG1!E-1uB_ER9q'>eE^aM6o&3:J_&Ctq(!1EZ_Vm:5V\Kn_gquua8lD6cJgWI$:7c_dW)LF^lQpKb@r+;DXWcl:Z/l=+Q%ptn0bAOf.;hpI&[NVZj"R3unbYqKmrIJ`GJn=pf$W"Ls20?G-YQn^k7HJIZ0H(p2[R*ZLC52.h"`87V1$r%&T>#4np!F4gPU84o$%b!EeoIb"h7ka[-0a##k!!BiZO"Fsfs*/,<2V":lU'n"hI1Va??KRf,Zb@<sPB[Gq61q+#K6Ks?J)^Ug4'/_^j_Q.M*W79d-M`#/O%]%4J.3al$@Zr!,He_=:-hE_e80np1'`^:$+nj+6&O&#`j8R'V/"$09PL%=acL^$u#-IB/RnK:2sek@diE`,G>?iE)da3>i4Fuk6,%p0=97/.*F=GHgCORP^r/>6Ym>C`Zt=*iE8B"S\NFkcQ'[l8`-T:1rmco8iI8;R8NllQ_+r_26<D<b7d*Yd-$s;#IF:jI*AL72[I0%/t-7!2CK+^,BrV[h11]#,;k`;6.pd]K^9bD\re3dnorc)g(KSNP8pEq2Sh9DWH\?TT81b*VsL/cV&p993G9f`<dj8-WHpg?B*<2^%9bVCLd('.rdM4C9]3`aU/SZ)oR'*>R.!+98TS49s(j1!^Z#f"7A2,'`?!h\(>*7-1'T+:<r._HF8F*%U?!8&MVmaiAElPMQ;28UX%2h]c1m9EaLCL1%^`(RPDC1i6$.BP;TG0qmD')D11]#/qI*8P'.[:)rd8D@Ua+-8/7]%:7&'2>j+(4[QP*B#Uk](,XB1FjA3`kXtR%P!-H4%P5`Tj87llkpbIV0T*HYg+oE:F)ji\3<0b1=[H5/"'ps(_(UuH:qGJP!dH)%`a9G68\%U_H,n"S$#KA6K2J'K_+WKo);>;R%A^uS]:A\2^UXEkZaiT(T-8Jm-Eqs**&4&'s3rO+D/I4/OCUem'eY:F+H2-7Ma7g,&n`$6ENri1tb9cI&>_./qiM&!DdWn5G!(M@h%-"N-^Qf(,5V&f3:>q^O&%Pe\FOV=G'"9k-\FWMD:-k(W13Y387)C'XU3JnR=E^uLj#BK2OAKj,%>"KSE=9`(.U;@ukC(u3ZCh+OZ%p4f1mZ0PVo`QCNjUOhJn6Ri.d&a^Was'%\cY[Ej6'A[`%aRuUT7?l@Mp*@*>U>+aD!stI2B:]!/l1^'32s0YhL65.?jK(%)GiuWm%&^%WI\:HA46KA8,"l:046DVS\.W<Sg4/)(t8FH^Qj"7m;;+N3d<1;G-*oHQ8L'N.Te@@_T`u96*#\B\P2&@:D"d85Y;N(uJfkjOF%Bn9[pKOr"gG5bd-Y-4]GN2*/X"7iGOYs;0Z)UJOfTfTIE0]k*4R-9]XI6RE#\7oj=''iE[6lrqGiif+28@DGm8QVIC)^)HpJk%=Z%=)^Z4(*@geM?b6`_&6,Cp#t#QPS=Sb3lc#Fq#TI\FI$l7&o5#nn>&lV7JI+]*oqlK$H]p7P/;AIGL23-8E\e_->3"=q"\H9<WV0f%"HN%*=,]7^(_%1_3!uLN(k7,_"0<$[rED@:0I<E29\om(l:h9jHt1s9GB6cXZG>*&ie\C39LTG7b7f/?B(mN'URoEp`q<g]M63I"%a='giF!qh0,!A6(4VL)@kq[19R/-05_1^`Nj2YTi-a'cQ1r.0#MO(!JBX\$F6eJ5kL/%_$>QI@S*.M`m4nd<j+^+^B3&)5q%<h7;%;m)V(NS7e!!o_?s9YTO5"G5[n.BT@I;T0#O<2Lcb>CCD$Gm.)GLE6GD6.AL_0=/9J*!ePPp]qjGaU%KY-@!R@Kf(*k=lDIaeN#MX%LpLGj:JDoO/)hj3`qc*(@Yli&Si%,T7WadIE@NfSl/jn9C`J/-d"Q"Y'P53F92`#?ce]R)JYYn"$tD,Uqi5l#&omGe;/U%iqCjRP%ophC5baQ$[N[%hU%"oUm7!4KX-A$;I-M0JVc^.UlogfWM>$]!rfA,,$dF(Lq%aIL#6EZ-KEDZX9[2`*d"qu4p@NC6Eqj%0V$:6>a%hc&PeO'Tc[65UtXl['8>]u6ImD[6OQ"e)sKiTVK7=^m$@ajK%0auI[e0g"aOWr#1Q9u8YTr>;WA3+q5+G%f_)I)@)?J%H=Y=Mb/.%bMYdG''hSr@'%,Zn$g</F&WW?D+WV#ch--qSt)+^^cC=mbYdD9_p%.P1(V%\H,lT>$qtXUS>(<&/=;T0JY@s9dl(qe4!<-<C\FtN%qS<drW\b2ZDb'AL`3A[s=R(gqC^:4j;B.ip%uGf^jLGs^G1%CeB[45J["6`neKL*GaI&5KXeW6:aL0YD:K#q8E!VWJE(0LhPNTMj%-r8t/!^O:VXoci/9r'8Fo\a-l]"EGgDnk;`=P2XQ^APUrC7F!^A'FZj2?TcJVOX<BF=S!ihMN`i=iQ_NeJm;*/nLIj7NVi84EAB.%6t+^W/)gi_`#r^6Zs62N.q)nO*m9GZmQ3/a!1QIFAQ/)h4.t0N?%@"F"3Ro\[)u]MBijYD^EZI1S8U)NMg,E-RkG%FLN]pPa3HOm%`(l'M]!si7cJ>k-'T[;XANnBO'PV$c0%d>&jr98i:VK)YnM6+)l@9FE%aKK-QSBHD5*qL2)2Qdr0b;m+1VP*Z*_`Yn^r;MH?#^!o%Ioq8BT8:^HKA"($aq_kEUnG.D8n.?TYOXuiX1]8*+-`C*(i;Sj`Np\0jFUE+)']ttM&0"%m&rt@bU-AT>^tV8@@S(=2#X3sTP3/=%1n*h'/>bYgOR^FFQsr'8;)_cX]G@)b=-R`(S/%FPA3iWeT:&5E,#!.TNsig0T8sA=e_`Wj#JsjgP=R408MY?rLo3!3c4'7jNpR][%>i$Yk+--.A(X3ETO9Z*8QY%*[`(W5-(>d,tfZDKecogGC`UG_U77Crm$t)"rB*0Oh0DMKj\M#umLg4>5a*LSX6ioosDd+=sFo]TN%_6U6^g`;OXZABk.P%A5^IhO2t8Dft<Ui!=[Oj$o^3Nc'R+'Oi@+te[oN>ATeeqlr>6E$CI->nqj/99W1ShI@p+5T!Ep:E8_#N89C%&n6!cXqgI3r*:.`gSqIBi.e-%DL#k;f*<`25Gf<LoP@AhVA/E<OT^_8K=q?S>j9BVEW`osYr,h>ogC%^8;"<@O\,n];']Qp:[+r`%7Hf/D,),OtG]QC+#Gh8:@Q3,b(*^=Ql>k-HN218^7`jGs&?;ZAfh97fp3%jTipS?ZD.GF?XC%+G[#Pl:$GW.:(HSI$\?dTg`Y*&-%2DE;B8/#-O_Hel/!%\j4')npDOn!Oj!V,Nf4^QR1=t:e>cSK_.j(d.C_l?[A!HfH>1$r0n26=#/P=Q':%6;qgf$0.jAhgN)1f:Mh%bS?A4pM.XI(@#a2``?'Wnq#kRCVrVe7hQ>S=\($?<c]0s/1iGE8nH@gNVM*t/aK?QiXg8:]fTDsAKhTqZnj;/pq:F;Wi4X=^b5(F%hgIbT"q!BI_&t!N8a8?^,5UZ8UTT64no1B^DS'.B9$%N1?bNC:@hdp_k:++mj$X4`ng0tVantl_r@)>*ZuAOJ&sVt8*Hre++qX_0%\J:C80s+c;4TT.L6UF6,4lhKe/_LMC0kGRZ)k7mR,rDY>%Y.ch]C%>:e7D(HA^li9mH>$d,]GOV>bV;.5"f]C,Xd/6Nn>)+rg%+J%.I=_lFDQ>0g@XaQG^8.#Of,G!e1UVh/'Ws]8moK.'O#XUH-=K;d1oaqoCZ.?FPZ$[Wr9RT^6L_lKmX6`V$pLH1#??%/]%LO]HO1O%+SA's<2VZdZ/MY>$nu>U1I5nFUeNCWj7a$>'Q49-0)[osKu_dE]OS#PnEn:]@%R1K3#R.baE#+lg8cV'XL4GA4:"#4NqDAf`T,.?%9lA<G^h\Po_tsB+8A4$*'tif%JEIT#F'%Grs#8_+WR>8I71##0>*QN,``F&4L-!EtdCp>UQ"1gFLor##mDCI`k0f-KPGI4C7_^.$%<];p-A][suV?np`m=WO@*<_^(RSXt&q1PcjaS:D`d%&HES4JQ3j+NrhUcJpnm1uBg7(5,,nOJ*C@6Kmh`i+2O6F;TFO**u+-PY+g%[%n^SR^ArT(*d:V1Ra5V"SL7o)ibV$9K9Y-C#L7FXoK+@o1FIR7tEC_`ApbtUT7WdF=-9FDTZtBL0P<gC\2tnMR-%`GA!+#`6Ufp%4duI?g8r.ff4WlqZ+^gkZ$SBE/OTRbD=RmoZg9b(VdqiETWfWmFTEoeE3t]G<^a"=M)"Fa:7YVr/P>HtG4iJqfaOAc*QKoa8%kX+%8hLZa?<^@APgYE#\p`f*p?kk%1YN_)_Y:Am&r-^g8E5;TA[Z'TC&p$/Ip$4&/$'$D1*78KF_?!Q@B[gI=clh4<_T+T:9gLRU/I<T%hh[&^gtFB4Jj)_>.$5AeIN[qE1HGAhkd-Rm*MqbB3\T=RWX/P!&oJlQL_$s4AJ3InRc6f^5/X!Cdf";`/?=F>B0)fO$!h6fb4r;2%s7Bh]qQ<-.*!4f]k6#p+BtXZV>49Bbc'RT#JMQ(.=LB00WT!0Uk<o1ZhRR4DQe5q7A]8&^^1?Nm""R&gJXcds!coe2]BW`c]i0S,%NfbaF;q*0IUU5Xq?9?0&%)ek.<6fVcE<MToR(NJ+%r8.J0h!B5+Nq`^<@q;eUABdd6<@l2`0e9dF)qMV2Yh[aLM.gXadIrWOIV16%8Db0QE)aJbelmP&J0-Ec\l.0\JHED#?oi`[``P6r5>$dJ]&,=oCD%c'-XUDOq#P?<(mLcZB2\A`C99`Ra$Xa0ekgV#c%N7KZn&Sd%3)<%j/3(t!98j`3,ZfaUR8efH8%FD#7l"et=r78hm::-Rq!m>e"HB-VCS:1V^CZSu?sl+*FDhLk0iirXJ:BkP8a*\8o/sr5V4IhQ%'Ea!WK4A>H4sh*Mm<RP5';0@=)aaGD:EhK5U?I8M%aQYTH[h(mpH0\uBZb?iI^q#BLG'J+3-IP)?)UlLe?sHNJ1G$SHn$g,_d]Yl%:^G/IKO)HN(ja-]4\b"R^+g?")q^?+W>[RRTUjIl\<*^'_!XZce<2tJd)pk-\C=5I;crC>$Z6?0Br[#38!e>Q_!!g+EarDLX15s&%6j@_OaD^2]@cQn%eUUeJoR-^!#Z7PKDIZjF!Z2^V6;?Tn4SYdePlNi_ZNo!QYW(3L5^FriGPCe75@2!E:(8V]OerU!'6aBlb4JuO%7[k5?s,*%=:3'AOTIHd^h;ZAi.I:Z(Yi_#NPRuh%`<#XpVm]1\CIu7ZfTXsqKuo]o?"JV39j8Vb.DLS^#[`u*cK2"r*!HOT4&n!E%Q\*#hBJeTn4QO3?cR8`D&<.LX'(K1lQC_P_U@KP6V"2le'@%_:kA=;q6<-ffk4*t4(bU@+K,((70[JNRgAuhqlrk@UFT1ST1LJ?1%O<'D:l[&G++"pqW?iRZ*rP>J'hA9XeXZ0U2K-gYaG6&5@,cqH:AiEU_U,iC?a9Dq!9RNH$c)^2;7^Ld;m:Zk+d=$<0pQ"V%'>E[o%ODX^D51,oh"eUpBK!&kVD'HJ]:b9[1?:JeN+\C3*ohM(B!T5YVchY3aW[0ZA$0,Cp,=]41.aVX[K1"m[8j_+@kPKMobV^!mC_0g+%=8PE'^[T$X4!dhbj,d"<OEs_r_h]AO:0QNlKe$pi_[jU*H7sB4.1B7iH+"T\UQW-=5hoWU-<M#rM4l_`4d`4$au<[DU@__;L-Vi8%ZN$J0QVbNSRguLk5u9A1gT.@L]cg'Y4?hOSdbTF-"--KPMGkmc7rdgOaU&!A?OmZm_S-'eWn1Y]';]VR^_ZgqK!5OIG+"iN2'=t2%.mc&NL.&Cj@SO?0]ON.'T.YDcr<g">J-'+:BQYe7<DO^7_Xm6b0KEIaPo+<Y`4T94igAK2E;h)8jHakp#e/Er*H0Y-MJ"5t*9H1;%S"EeC*<T,=%##7'FWjOPbPm6`n$cbbOT;B:WaV?M$fFX4"kuA'DIQ`D)#T&_1_V;$.n=mn)`ac%4D6d@Na6r@b"Ah@G*6kq/2D7F%ntp+.XI1X(6!0noff0BITc@o.@EYqZd*+'f7PW'*P/ebA#nsBJZA%I^_^)sSj,m?A?.iH]*/sdqFHL%l"GUQ0WW[@+E!gHMc"+gb%Fl>-OMBt5f/<g9(cO"0UfLR/G:M)$@'Xq0Xp+r1Z_0SjuAuOIuA?=.PK^6XZLdS@"D$CIhVbZPQ>Rf*1#;Upi/#3FrOId2ckYRBc%64H2)s%+s?mT+j[UD[Y.5m9Hc(U1BAPE\qIbB5hNPk5"/5)&XldnAAOCp'(qR+poq9Vn^]@>tX38/1<jQrmO_3afO<d]"!mZmT+_%h3J?M<Z;@H8R5e6:U!JC^G)!]:fO6JXK(q&1.n&hFZ_'O?,5<sZR?C)2&\Iblq'kh'+!Y=eB#'Z22T6c79G\NW*HS;DiuFfGI?aS%aSNRn&\;4%;Qu9W.>fRRE+ArSPXHN+O:,o04M&G`^Ddrk.r<R9Q-Z:#_@"5)26e@aINSu]ZKr&o/":^Qi[>Kk#P?7bL.?'@Y_ool%N<t6(E#GM*J?0V6T2(Z^OqJlfS7]gC:@1`.*0-$q!W+iT[6<skcfM)-1Of<eh#!qh<Su*`KIO`2oi`K;'\*8+=lhT_AEVne@lfW5%G=B"AE<\N([]'b"3Q2.n_dZt-.B<G/Mh5LZZI]JiM3-iZ!`KN;kD1t+(&*=PYnaGZf+(!0lqjH$PUdB'g(gAo1JcN5/$;E\Dh%2:%[[UT93Q7s4gDbdf.E8OAFs>b=qVL</UqDj@$Q@iR=KXnm_2<n'3O,aF,NOY<I@+WqT>sp`0OP3I^?bt_?N8e"9Vm=(EA^N]K^EYT%'f0KlIqNgLW1NNP@^]\DdD+nWm'_9E"aM<4+DS'Hb1U1[em'5-.EtD^'KR,>@Y[.Uh;7o='M-m%c'#mYCL2I.N.T.BV?DEMB$`i=%[^FcrL)Q,l7k(Bm'qhUB1D2"YK)85U,2-b_Z8ukLN\(pP]1[6[s2-lRcR"J+WSM`t6sjt"#WGAh0sUq<g;Q^@D$K-*mcu84]r3f6%=9IuG6i^h.L["L<<3!t75SS"K,A\+opi+-hbWo"qE7(j_F<J+TTq`Cr4K^Pqi2R$mP/"tW!iIeo2oUf'MOu]u,UPNKS;QG<)ea)2%`r(@oI&'s\&CK3[*<W@DlOC1>!MmO!3dqF@kb'_(RO(s#lC\em1-hc<D)HG[HCrKr`@,QBA?:?Q7rBmN&Zr8V$7>,kD:M0/'^.DF%CT:A@.Gp6)]XE[->nmd0bLBFo6M-lbEGb@X;il6Kqq1EUdT[:k\1Lf[HL&+NHS!M!)=_CB$qjD(/U^B^*eH5-IUSFpc9/jVF>DqR%K9d?pR"p7cf%GPe`(%O#(C(X!X8h:u(u`cG<7.Q\9g6l$P^06%(L$+'%e,_&#Wca.O/>V38`UF/h&)6rKLReF#GOWLmR#b8RqqA9%5::VEG[*:@T+]OdR+2;g^IM$`OLe(b7I^RQP:8X#2&>=<EuHX<a7"/[Tu2UV-0#_3@a$CU&LeZ,N+^MUQ(<*9R,^)JWZHp%R=O?2%MO_R"a0&D%G6&u$(;_.c:9L0n#,,j%V$^s;0E??+bkk278oj0ALH'>g3o*ur7Ok>Mks6#q@4Le>HP@fMLQ,Ag1+G?1Qm;OT2],J:%BUG1Ka\b`gJERfp\isGJ`Qsn'k79S^0O^=:*I!kB7?Hc'd?QBJC0(_(e;6">E5\piXD1[[hD'FsRDE[(=%JGc#g&$V4P6+B"\iK+%FdaV6OF]s!(giTD>[T89_RUdcG$A8q6*T=]$ZSVl,bdo4CK!Sa":r\P^J0k02oOhT$eD^B5OXu>M4aoTW[8DPG]&?1G]"?);n/hZ%=VIddgYWJuYE2Z%q"<)hfaEacG3T6HL:hltc^3;WGp!nt:;HFGJ?hd)$^Q4F0?U84JA4^Qk8R;5]G]@>ZJb>78YV%;YGN:I&hSUF%88^bLZH(91A8O-NXXdbjN)YVZOq<<88+jE\"d^jO.N".[8kp!uqG]?,.O@KbWiM:Zlcs#oC;;7kNOj;<U2(<21+FIbKJE*E<)hO4%%YXFGo!Fn\ZFr6b:*N]!mP8a]l[OaSM5=5n3agJdaqlKp!o6%@cCm3q'u@ECX;Q&)mD<l<Io^#::Dn!D5T!%T+2VhF:9H(.^iTkk%ndU*11/tFRl<5?Z41j3uEK7!CnqPO6HP.Q==l6NRQ*$EWfq;c+"'PJQ)Jnq`5$iW@c^3;:mr,8)5B(_g/(>BEn/N!_YU;;gU/a-?%OpDG]6m$m70hJRDT6K\rUUmo>EW&G7;kG(<B@umgL?"`MN6\u!#feW(IQ0ISj#2ZJW(M<fD<a((i'u\&"_"a%-A(9Xm>5sb+ar`s%5VuCcgh`CaB-3GA:;fEF;c#UlPRtMLd].`%Y9DY/6&LoG(<h/.DPW.qQkYKlE'7ujQ`K`mJ[%!\0l$3`Vm'kFb+3P$FCV#h6.uI9%PqeSgisNlW@7:VW#[ESSg/6nXR]hoE8TWPi!L?<4Qj8^]`7nhKM5?VS@S^GZ>CW4k/J,mt_3_'n!1c`g3kA4m$^S/J4H4Jl@Oid%%ThZ1V<8[gGq1:`DQ[tDE)Zf7sNYYIrE'qk(X!Wb%:pnFP.6L,j`usoP(<ml?\'SAWWt2(plg>RF2Q0XOk!o;qB^0d'S!u0?2"T@5%$/(g7iu7dJ=0i`'Oc\oI%A=Dcb0gt+2GnhTQSI\*ABA\\#37SHg+?hB9FK/`"m_c"&bF:)/5WurIOA.;Z.]\(Qe(5]QrSkJ6[LZG%\UpS%NQ-kD6ptjX:%DoGMSqC=5dZP0fBr];*gfK8^2s[f"nj4mWJjG,?qd]8=k\OV*pc`AcD(3U.*r+<V1=/hFH1+@aHfNM4?f(t%,m\+?:XkV3A;e4^NWuW?FK/2HOKD`YGP+QSZEs3H$U%XF+Z0QKf85a:U1XQn&mZ9d\08"^=g1&Fdl34k2=mtG_b0l-Sc&&No_fhK%&2pd\*(?EUmF:q`Cq_Ib='IQiAhQ1<Mi\WIiPU=01@p#eS0LRK5ZDJTWHg>,cd^NCbr[Wc'51Nqq$,D3AC!6[L?t?;o(BNd6#o7;%*ED&b+H7k09Jc*lNJQn5beo&u#jd0h^9qIu5SX&!@XDmKMV"k$QmP4?PV\5bl[m3BlG3MqW:=!$pXP+jOeT?ojIa;`BPsFeni>D8%ZN3R<f>D#*S8+;M6"j^#M,<q(aQ+e'@!`T4O=*)___q@7;bp6<FL^#/iH>cVCnVS*iWFPuP"n@q-=Wt)-@fN4g:,SeCa1VBV-^XW%(o*1uG1D?l!bF;.)QV7BcrfAM?%H8hb3lLgMF^)\&H/3+Z""L5l#K^_=q_sb7aVglnKhQj<=T+PCXjh8nW?38]IIF4#>?aU+F<8<%G/'!Qr7#UR''T6T<qekbg2EYJYS^3oN`m.)A6jeRG%bc`/lGW?7,/^B8g;a/f>Nn'aIK7Ei9QZ(j(UOLapae?`@0D:\)79EOe_Q1%&uu`a=iQsVP$L7=qfkQR8AASLRXoZL%j3(02oJm\2iR&P51SrRQ8Fh,`!P0;VLCf^1[Qr&=Uh[lS]e!\Q%9tOG"pYYoIEhPn4bIU%14S.80ot8oYR)7H8`WS%HibUEhYRs^28?!!i"<r&`=ucn9=W<MLt"U(-n@+K]ORrSB'FM%#?Imk_qa#4=kR0`e?+V?Kl4A#2<XUL%5_K>B9[`u1hGaW/FKHV-Jlp4YL37]e]O=O4;H*lFrCDJInL)!:?F:#M,sf.b.eYj8OQ@$BKs2s(PYN.sPj:F-X6eU^(arIW->C6A%/q:D0OU`9HVlQ?<;Cum6b$RmZO[lLD@8#rV'PW,\/tisH7tIY506NE<-BKH+JM\_0!bl6^/m^ls"(qcgO#N-BdZ.W<7=obQbQhDa%;ebDULdEjbBL#9UcOFC<pW4F:eKV3<k$3sj-V7:.M&b\\F]V74#pquYcU='4,<QPV`ATpf`)"]C0ter'+$jeOc`_9RE(i`WS^kVN%pkhqj66Fs\dpTQ`&;e(?0#g<ckcE'<[o`p7#J6"jmSm9`PI(^<=(5F"7f)I,6?c_&Als3ZqlmTY"STT/L13SL<r6Z%a%\G\rgtEE%*d-s+nC7/abQ\8lK%>q9%GS6YPu_'Ym8?3B%t-h#-fTkpP@B'hh(pHU]-&?YF2P)qI)E=#'%r6a^7-!hoP:sl/k6U[R2;kU,R6<Z%B7#he*"gRe[nmV:`_%Lc'Xl*J$Gs]r3,jE'EV(KM.JN&Qo-O*uD@dc'.giOmkD``J&s8#U6D\6U#oLO7%0SMBO[$*^bNojg0%eT1%(Kef)6uk`6q9S'[1N%cRbJPgT<7QEd\p?*A736#8n[>cX`%t"[/@`q^`BNeMRbM,u_/p<Z7H:d@jXgV8X#JiLYtXD67H,>UYT-4*%R0MZVP8iZ>`+H-9_^.f<FuBH?AC[j&_fd>5h'5OK[UtKZH2,0fkT%t;__"f!'`%\PSq9q;%6Y^OE8$a-EH[fWY)r-j"u&JIm[.#_%<:kqoXWG<1"A`uGdCMCqe.\q,37I89I(]5B=!am"bPe(4oV!Ci8f$4TU=%I'UpM1P@b5UrLO0@\RhkGh61=i>dT^-)E#:17BsGM=%X"oJB$nN#].S(3p(*?d8ooG#@dJD;1@4MP>TXlRb.4dTJhcMT-NkE='fXKK,)WR$6JCjHO\_A9j7je]9J18?feHQNoXYQ_[L=I3!%]PELJ4t;Z7FYhibE.O_;VhH?kKd%>/7d=s/2T6AL-8$;Ve]VVl\=)Y%^k;#9AWXp!A:8)SF(@=^3*CbUg8r28(L%++(7u"#TsP>r%Cdkr<7`rhY]d<odJ29>"S84&\cPYco(S?[J(J\MZ*u<).>*Wp_>n;hOgq#r*3"R'2m?c*qj2sII`]Fb9B]=_0?G,@^98q-MlEuS,%/aV_#8%3G5"a91d>n?8coB)tfJ0khRSZ9lrS3XlSs-o4KEd?WR"j>bGk(d2_F.REkP'r'F=lsY(=E6lP3VM;%]uF(b]NS!(B0%$k%PqVJ@9&FSqk`=C:3sZ6H-(XLIH>,[Lg[*=4dT@9a+(nKT>nEuDA)[13=ZVYbH<nO^0<Xt*k-p'.MUYbkgOcKLKL9.4'qRu)+G*H(%5UoQ$rJ@fX9i;d$([Cm_<(=4L+bkgMf-Yj4n_sb]]VKb<qAPhRh]D/2Q[9\(o#17H-[CPOl4R2Uk^A:..N#`;q[/g2-(5CY`0Q0U%GI^*pZ/oE,]AM3W>%`kWeU0+SK.*k-2Sf%Q]WNcjJ<<i,l@HhF`)nFr@a,(dbLI_N<8Ypg(?,&MfJYps)oh_=VR^9K'@ZWN.%m$]%qA[]L_H5C\<,$X-qia4T4(3d';ebWn/Z/L@A_^m+N`Xm(]C2?iC[?@?h$RcD]e1j:^90)1"6QcqErV";dK1RN\?c%CU?&W@q[Ia<%3S#FUUaA>ro&U%^>k,>4='/_rCQ+_oQ2FBu6b7Tt19)M?5Yt@X*EY^HF2QMPXR!E4Wk)ilDQCB=/;1^pU@f<I/Kp+'<lL^CcBM4D%;ZdPNGI8)B$9Bh*f64".N1D+YfNl6M0)XPm4^QoaXMQ/MY"o]Aj)dCs5%/%h[&%^;(LVL:XA_\&#e@D84j@Pq,+'Pu_7ZG6#;[@3%bE.NC5H&F<'d\MY9uN]O5ICoW&:uIa@FAA"5r&8eR$C"Y*p5#U1]Y?\61XCA!^>!s\p/G1-t2c#UUmKXQ87?-5L+BVOe,2tl_k^:%'1o@b6muh=NSF\Q:6NBpeD8)T*lFFg]Fi2Li3QM,K[Sms/d>86A0OT;:cL']B]t\`>1?O0K%n3YBbt<H@0Y1NlYqtr$rlGhT*38t%k(Z1EHe+m!pAUP-^;N3VY@NAp<#,]Z2'!2gA5Kkim-lO=%YR5"b&:nF.Es%03RqB=_hf^]G]R)@,?0<td;)_5]/^3VSTej(IO:4I%!dS7#W9!:r.Z?fO]ucF[dbRagr@L6@@^IKiKJ6<r^49/PKc$eVoV+$F8klRNA6BP3s"c6,>A_t1ljWS)Ptt=NYVI=.[NIGnWs.8-%`su`[KG^<cp:jM@2a,HC>fT.;SalV4W`mH-[Ptn.>,-@/$%oApWVd:j8SFG=Ne=G;ZCd;s<f97M61Wc33CbM66^_H>/XT9I(5rEr%;2i1r9kf5X^plsZO5QA`f9E'@"NPYeBZm>ofbQj7^!Yi#p\B((Nh7u0cQ<M=oO=GG0(jm`Va^KdjO]b0]qE7gq,\,.[*BfN4Rs6,%&g3XGbE]`UQ=I+*A%C&]CgP9=H[Q3+cNI4HibBF(mWp8e&GE=]r"B0:mPYQ'!A-gU^cm65kr/creY&:\9c+m&*<UU?d'=Rq/Gnit%9PbbB9oj>/KVmQ^YN$A+>f]!_p/'G2>,Oe[CTGlk)rW9TWGVBkf'T.)IljH[QCi:/9B#N^\dD+*C?m@`^L8:R\qHQg6fYJd?te7e%bC0b)NSdj0#io=;]2eJ%qHd[LYq*rU%-,:X%C):ohAiGMXVW)"^;?1G?XTKjr4`b,r:BB+s6]^@s75sabL^*NqY$O's2P:o2tspK%IJW4(nMe5__tig5?iKurg\6anIf6`_s5bmUs7,EIJ,AbSY#2r"cjg$PmDn,_hs]HOq=Wp3^\RE?h`i1^p>o(W^]/s#C*;5ns4,Ts%l'J%Bot/4LG0sY;p;]t$4UO>Zrp$^0^OH4^ons%Rcg.26kJuKXp>\C9rssVWn\YmPs24i^s7#?hr:-]br:KAps7X>@5Q%.GIfAu#%hgYF`q<?XhTE"K2^OQ+Te$$OGdQd^+qC`q?rq>S0hnOX;o^OU7qXm('>_g8e++F!?s8B\rr"jk[CdJ~>%AI9_PrivateDataEnd